{"version":3,"file":"479e2c10-c43c34c973e00be81ba6.js","mappings":"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","sources":["webpack://sonic-scribe/./node_modules/@magenta/music/esm/protobuf/proto.js"],"sourcesContent":["/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.tensorflow = (function() {\n\n    /**\n     * Namespace tensorflow.\n     * @exports tensorflow\n     * @namespace\n     */\n    var tensorflow = {};\n\n    tensorflow.magenta = (function() {\n\n        /**\n         * Namespace magenta.\n         * @memberof tensorflow\n         * @namespace\n         */\n        var magenta = {};\n\n        magenta.NoteSequence = (function() {\n\n            /**\n             * Properties of a NoteSequence.\n             * @memberof tensorflow.magenta\n             * @interface INoteSequence\n             * @property {string|null} [id] NoteSequence id\n             * @property {string|null} [filename] NoteSequence filename\n             * @property {number|null} [referenceNumber] NoteSequence referenceNumber\n             * @property {string|null} [collectionName] NoteSequence collectionName\n             * @property {number|null} [ticksPerQuarter] NoteSequence ticksPerQuarter\n             * @property {Array.<tensorflow.magenta.NoteSequence.ITimeSignature>|null} [timeSignatures] NoteSequence timeSignatures\n             * @property {Array.<tensorflow.magenta.NoteSequence.IKeySignature>|null} [keySignatures] NoteSequence keySignatures\n             * @property {Array.<tensorflow.magenta.NoteSequence.ITempo>|null} [tempos] NoteSequence tempos\n             * @property {Array.<tensorflow.magenta.NoteSequence.INote>|null} [notes] NoteSequence notes\n             * @property {number|null} [totalTime] NoteSequence totalTime\n             * @property {number|null} [totalQuantizedSteps] NoteSequence totalQuantizedSteps\n             * @property {Array.<tensorflow.magenta.NoteSequence.IPitchBend>|null} [pitchBends] NoteSequence pitchBends\n             * @property {Array.<tensorflow.magenta.NoteSequence.IControlChange>|null} [controlChanges] NoteSequence controlChanges\n             * @property {Array.<tensorflow.magenta.NoteSequence.IPartInfo>|null} [partInfos] NoteSequence partInfos\n             * @property {tensorflow.magenta.NoteSequence.ISourceInfo|null} [sourceInfo] NoteSequence sourceInfo\n             * @property {Array.<tensorflow.magenta.NoteSequence.ITextAnnotation>|null} [textAnnotations] NoteSequence textAnnotations\n             * @property {Array.<tensorflow.magenta.NoteSequence.ISectionAnnotation>|null} [sectionAnnotations] NoteSequence sectionAnnotations\n             * @property {Array.<tensorflow.magenta.NoteSequence.ISectionGroup>|null} [sectionGroups] NoteSequence sectionGroups\n             * @property {tensorflow.magenta.NoteSequence.IQuantizationInfo|null} [quantizationInfo] NoteSequence quantizationInfo\n             * @property {tensorflow.magenta.NoteSequence.ISubsequenceInfo|null} [subsequenceInfo] NoteSequence subsequenceInfo\n             * @property {tensorflow.magenta.ISequenceMetadata|null} [sequenceMetadata] NoteSequence sequenceMetadata\n             */\n\n            /**\n             * Constructs a new NoteSequence.\n             * @memberof tensorflow.magenta\n             * @classdesc Represents a NoteSequence.\n             * @implements INoteSequence\n             * @constructor\n             * @param {tensorflow.magenta.INoteSequence=} [properties] Properties to set\n             */\n            function NoteSequence(properties) {\n                this.timeSignatures = [];\n                this.keySignatures = [];\n                this.tempos = [];\n                this.notes = [];\n                this.pitchBends = [];\n                this.controlChanges = [];\n                this.partInfos = [];\n                this.textAnnotations = [];\n                this.sectionAnnotations = [];\n                this.sectionGroups = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * NoteSequence id.\n             * @member {string} id\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.id = \"\";\n\n            /**\n             * NoteSequence filename.\n             * @member {string} filename\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.filename = \"\";\n\n            /**\n             * NoteSequence referenceNumber.\n             * @member {number} referenceNumber\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.referenceNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * NoteSequence collectionName.\n             * @member {string} collectionName\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.collectionName = \"\";\n\n            /**\n             * NoteSequence ticksPerQuarter.\n             * @member {number} ticksPerQuarter\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.ticksPerQuarter = 0;\n\n            /**\n             * NoteSequence timeSignatures.\n             * @member {Array.<tensorflow.magenta.NoteSequence.ITimeSignature>} timeSignatures\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.timeSignatures = $util.emptyArray;\n\n            /**\n             * NoteSequence keySignatures.\n             * @member {Array.<tensorflow.magenta.NoteSequence.IKeySignature>} keySignatures\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.keySignatures = $util.emptyArray;\n\n            /**\n             * NoteSequence tempos.\n             * @member {Array.<tensorflow.magenta.NoteSequence.ITempo>} tempos\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.tempos = $util.emptyArray;\n\n            /**\n             * NoteSequence notes.\n             * @member {Array.<tensorflow.magenta.NoteSequence.INote>} notes\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.notes = $util.emptyArray;\n\n            /**\n             * NoteSequence totalTime.\n             * @member {number} totalTime\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.totalTime = 0;\n\n            /**\n             * NoteSequence totalQuantizedSteps.\n             * @member {number} totalQuantizedSteps\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.totalQuantizedSteps = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * NoteSequence pitchBends.\n             * @member {Array.<tensorflow.magenta.NoteSequence.IPitchBend>} pitchBends\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.pitchBends = $util.emptyArray;\n\n            /**\n             * NoteSequence controlChanges.\n             * @member {Array.<tensorflow.magenta.NoteSequence.IControlChange>} controlChanges\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.controlChanges = $util.emptyArray;\n\n            /**\n             * NoteSequence partInfos.\n             * @member {Array.<tensorflow.magenta.NoteSequence.IPartInfo>} partInfos\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.partInfos = $util.emptyArray;\n\n            /**\n             * NoteSequence sourceInfo.\n             * @member {tensorflow.magenta.NoteSequence.ISourceInfo|null|undefined} sourceInfo\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.sourceInfo = null;\n\n            /**\n             * NoteSequence textAnnotations.\n             * @member {Array.<tensorflow.magenta.NoteSequence.ITextAnnotation>} textAnnotations\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.textAnnotations = $util.emptyArray;\n\n            /**\n             * NoteSequence sectionAnnotations.\n             * @member {Array.<tensorflow.magenta.NoteSequence.ISectionAnnotation>} sectionAnnotations\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.sectionAnnotations = $util.emptyArray;\n\n            /**\n             * NoteSequence sectionGroups.\n             * @member {Array.<tensorflow.magenta.NoteSequence.ISectionGroup>} sectionGroups\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.sectionGroups = $util.emptyArray;\n\n            /**\n             * NoteSequence quantizationInfo.\n             * @member {tensorflow.magenta.NoteSequence.IQuantizationInfo|null|undefined} quantizationInfo\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.quantizationInfo = null;\n\n            /**\n             * NoteSequence subsequenceInfo.\n             * @member {tensorflow.magenta.NoteSequence.ISubsequenceInfo|null|undefined} subsequenceInfo\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.subsequenceInfo = null;\n\n            /**\n             * NoteSequence sequenceMetadata.\n             * @member {tensorflow.magenta.ISequenceMetadata|null|undefined} sequenceMetadata\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.sequenceMetadata = null;\n\n            /**\n             * Creates a new NoteSequence instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {tensorflow.magenta.INoteSequence=} [properties] Properties to set\n             * @returns {tensorflow.magenta.NoteSequence} NoteSequence instance\n             */\n            NoteSequence.create = function create(properties) {\n                return new NoteSequence(properties);\n            };\n\n            /**\n             * Encodes the specified NoteSequence message. Does not implicitly {@link tensorflow.magenta.NoteSequence.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {tensorflow.magenta.INoteSequence} message NoteSequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            NoteSequence.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n                if (message.filename != null && message.hasOwnProperty(\"filename\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.filename);\n                if (message.collectionName != null && message.hasOwnProperty(\"collectionName\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.collectionName);\n                if (message.ticksPerQuarter != null && message.hasOwnProperty(\"ticksPerQuarter\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.ticksPerQuarter);\n                if (message.timeSignatures != null && message.timeSignatures.length)\n                    for (var i = 0; i < message.timeSignatures.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.TimeSignature.encode(message.timeSignatures[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                if (message.keySignatures != null && message.keySignatures.length)\n                    for (var i = 0; i < message.keySignatures.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.KeySignature.encode(message.keySignatures[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                if (message.tempos != null && message.tempos.length)\n                    for (var i = 0; i < message.tempos.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.Tempo.encode(message.tempos[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                if (message.notes != null && message.notes.length)\n                    for (var i = 0; i < message.notes.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.Note.encode(message.notes[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                if (message.totalTime != null && message.hasOwnProperty(\"totalTime\"))\n                    writer.uint32(/* id 9, wireType 1 =*/73).double(message.totalTime);\n                if (message.pitchBends != null && message.pitchBends.length)\n                    for (var i = 0; i < message.pitchBends.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.PitchBend.encode(message.pitchBends[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n                if (message.controlChanges != null && message.controlChanges.length)\n                    for (var i = 0; i < message.controlChanges.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.ControlChange.encode(message.controlChanges[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                if (message.partInfos != null && message.partInfos.length)\n                    for (var i = 0; i < message.partInfos.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.PartInfo.encode(message.partInfos[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n                if (message.sourceInfo != null && message.hasOwnProperty(\"sourceInfo\"))\n                    $root.tensorflow.magenta.NoteSequence.SourceInfo.encode(message.sourceInfo, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n                if (message.textAnnotations != null && message.textAnnotations.length)\n                    for (var i = 0; i < message.textAnnotations.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.TextAnnotation.encode(message.textAnnotations[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n                if (message.quantizationInfo != null && message.hasOwnProperty(\"quantizationInfo\"))\n                    $root.tensorflow.magenta.NoteSequence.QuantizationInfo.encode(message.quantizationInfo, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n                if (message.totalQuantizedSteps != null && message.hasOwnProperty(\"totalQuantizedSteps\"))\n                    writer.uint32(/* id 16, wireType 0 =*/128).int64(message.totalQuantizedSteps);\n                if (message.subsequenceInfo != null && message.hasOwnProperty(\"subsequenceInfo\"))\n                    $root.tensorflow.magenta.NoteSequence.SubsequenceInfo.encode(message.subsequenceInfo, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();\n                if (message.referenceNumber != null && message.hasOwnProperty(\"referenceNumber\"))\n                    writer.uint32(/* id 18, wireType 0 =*/144).int64(message.referenceNumber);\n                if (message.sequenceMetadata != null && message.hasOwnProperty(\"sequenceMetadata\"))\n                    $root.tensorflow.magenta.SequenceMetadata.encode(message.sequenceMetadata, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();\n                if (message.sectionAnnotations != null && message.sectionAnnotations.length)\n                    for (var i = 0; i < message.sectionAnnotations.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.SectionAnnotation.encode(message.sectionAnnotations[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n                if (message.sectionGroups != null && message.sectionGroups.length)\n                    for (var i = 0; i < message.sectionGroups.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.SectionGroup.encode(message.sectionGroups[i], writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified NoteSequence message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {tensorflow.magenta.INoteSequence} message NoteSequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            NoteSequence.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a NoteSequence message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.magenta.NoteSequence} NoteSequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            NoteSequence.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.id = reader.string();\n                        break;\n                    case 2:\n                        message.filename = reader.string();\n                        break;\n                    case 18:\n                        message.referenceNumber = $util.Long?reader.int64().toNumber():reader.int64();\n                        break;\n                    case 3:\n                        message.collectionName = reader.string();\n                        break;\n                    case 4:\n                        message.ticksPerQuarter = reader.int32();\n                        break;\n                    case 5:\n                        if (!(message.timeSignatures && message.timeSignatures.length))\n                            message.timeSignatures = [];\n                        message.timeSignatures.push($root.tensorflow.magenta.NoteSequence.TimeSignature.decode(reader, reader.uint32()));\n                        break;\n                    case 6:\n                        if (!(message.keySignatures && message.keySignatures.length))\n                            message.keySignatures = [];\n                        message.keySignatures.push($root.tensorflow.magenta.NoteSequence.KeySignature.decode(reader, reader.uint32()));\n                        break;\n                    case 7:\n                        if (!(message.tempos && message.tempos.length))\n                            message.tempos = [];\n                        message.tempos.push($root.tensorflow.magenta.NoteSequence.Tempo.decode(reader, reader.uint32()));\n                        break;\n                    case 8:\n                        if (!(message.notes && message.notes.length))\n                            message.notes = [];\n                        message.notes.push($root.tensorflow.magenta.NoteSequence.Note.decode(reader, reader.uint32()));\n                        break;\n                    case 9:\n                        message.totalTime = reader.double();\n                        break;\n                    case 16:\n                        message.totalQuantizedSteps = $util.Long?reader.int64().toNumber():reader.int64();\n                        break;\n                    case 10:\n                        if (!(message.pitchBends && message.pitchBends.length))\n                            message.pitchBends = [];\n                        message.pitchBends.push($root.tensorflow.magenta.NoteSequence.PitchBend.decode(reader, reader.uint32()));\n                        break;\n                    case 11:\n                        if (!(message.controlChanges && message.controlChanges.length))\n                            message.controlChanges = [];\n                        message.controlChanges.push($root.tensorflow.magenta.NoteSequence.ControlChange.decode(reader, reader.uint32()));\n                        break;\n                    case 12:\n                        if (!(message.partInfos && message.partInfos.length))\n                            message.partInfos = [];\n                        message.partInfos.push($root.tensorflow.magenta.NoteSequence.PartInfo.decode(reader, reader.uint32()));\n                        break;\n                    case 13:\n                        message.sourceInfo = $root.tensorflow.magenta.NoteSequence.SourceInfo.decode(reader, reader.uint32());\n                        break;\n                    case 14:\n                        if (!(message.textAnnotations && message.textAnnotations.length))\n                            message.textAnnotations = [];\n                        message.textAnnotations.push($root.tensorflow.magenta.NoteSequence.TextAnnotation.decode(reader, reader.uint32()));\n                        break;\n                    case 20:\n                        if (!(message.sectionAnnotations && message.sectionAnnotations.length))\n                            message.sectionAnnotations = [];\n                        message.sectionAnnotations.push($root.tensorflow.magenta.NoteSequence.SectionAnnotation.decode(reader, reader.uint32()));\n                        break;\n                    case 21:\n                        if (!(message.sectionGroups && message.sectionGroups.length))\n                            message.sectionGroups = [];\n                        message.sectionGroups.push($root.tensorflow.magenta.NoteSequence.SectionGroup.decode(reader, reader.uint32()));\n                        break;\n                    case 15:\n                        message.quantizationInfo = $root.tensorflow.magenta.NoteSequence.QuantizationInfo.decode(reader, reader.uint32());\n                        break;\n                    case 17:\n                        message.subsequenceInfo = $root.tensorflow.magenta.NoteSequence.SubsequenceInfo.decode(reader, reader.uint32());\n                        break;\n                    case 19:\n                        message.sequenceMetadata = $root.tensorflow.magenta.SequenceMetadata.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a NoteSequence message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.magenta.NoteSequence} NoteSequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            NoteSequence.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a NoteSequence message.\n             * @function verify\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            NoteSequence.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (!$util.isString(message.id))\n                        return \"id: string expected\";\n                if (message.filename != null && message.hasOwnProperty(\"filename\"))\n                    if (!$util.isString(message.filename))\n                        return \"filename: string expected\";\n                if (message.referenceNumber != null && message.hasOwnProperty(\"referenceNumber\"))\n                    if (!$util.isInteger(message.referenceNumber) && !(message.referenceNumber && $util.isInteger(message.referenceNumber.low) && $util.isInteger(message.referenceNumber.high)))\n                        return \"referenceNumber: integer|Long expected\";\n                if (message.collectionName != null && message.hasOwnProperty(\"collectionName\"))\n                    if (!$util.isString(message.collectionName))\n                        return \"collectionName: string expected\";\n                if (message.ticksPerQuarter != null && message.hasOwnProperty(\"ticksPerQuarter\"))\n                    if (!$util.isInteger(message.ticksPerQuarter))\n                        return \"ticksPerQuarter: integer expected\";\n                if (message.timeSignatures != null && message.hasOwnProperty(\"timeSignatures\")) {\n                    if (!Array.isArray(message.timeSignatures))\n                        return \"timeSignatures: array expected\";\n                    for (var i = 0; i < message.timeSignatures.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.TimeSignature.verify(message.timeSignatures[i]);\n                        if (error)\n                            return \"timeSignatures.\" + error;\n                    }\n                }\n                if (message.keySignatures != null && message.hasOwnProperty(\"keySignatures\")) {\n                    if (!Array.isArray(message.keySignatures))\n                        return \"keySignatures: array expected\";\n                    for (var i = 0; i < message.keySignatures.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.KeySignature.verify(message.keySignatures[i]);\n                        if (error)\n                            return \"keySignatures.\" + error;\n                    }\n                }\n                if (message.tempos != null && message.hasOwnProperty(\"tempos\")) {\n                    if (!Array.isArray(message.tempos))\n                        return \"tempos: array expected\";\n                    for (var i = 0; i < message.tempos.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.Tempo.verify(message.tempos[i]);\n                        if (error)\n                            return \"tempos.\" + error;\n                    }\n                }\n                if (message.notes != null && message.hasOwnProperty(\"notes\")) {\n                    if (!Array.isArray(message.notes))\n                        return \"notes: array expected\";\n                    for (var i = 0; i < message.notes.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.Note.verify(message.notes[i]);\n                        if (error)\n                            return \"notes.\" + error;\n                    }\n                }\n                if (message.totalTime != null && message.hasOwnProperty(\"totalTime\"))\n                    if (typeof message.totalTime !== \"number\")\n                        return \"totalTime: number expected\";\n                if (message.totalQuantizedSteps != null && message.hasOwnProperty(\"totalQuantizedSteps\"))\n                    if (!$util.isInteger(message.totalQuantizedSteps) && !(message.totalQuantizedSteps && $util.isInteger(message.totalQuantizedSteps.low) && $util.isInteger(message.totalQuantizedSteps.high)))\n                        return \"totalQuantizedSteps: integer|Long expected\";\n                if (message.pitchBends != null && message.hasOwnProperty(\"pitchBends\")) {\n                    if (!Array.isArray(message.pitchBends))\n                        return \"pitchBends: array expected\";\n                    for (var i = 0; i < message.pitchBends.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.PitchBend.verify(message.pitchBends[i]);\n                        if (error)\n                            return \"pitchBends.\" + error;\n                    }\n                }\n                if (message.controlChanges != null && message.hasOwnProperty(\"controlChanges\")) {\n                    if (!Array.isArray(message.controlChanges))\n                        return \"controlChanges: array expected\";\n                    for (var i = 0; i < message.controlChanges.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.ControlChange.verify(message.controlChanges[i]);\n                        if (error)\n                            return \"controlChanges.\" + error;\n                    }\n                }\n                if (message.partInfos != null && message.hasOwnProperty(\"partInfos\")) {\n                    if (!Array.isArray(message.partInfos))\n                        return \"partInfos: array expected\";\n                    for (var i = 0; i < message.partInfos.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.PartInfo.verify(message.partInfos[i]);\n                        if (error)\n                            return \"partInfos.\" + error;\n                    }\n                }\n                if (message.sourceInfo != null && message.hasOwnProperty(\"sourceInfo\")) {\n                    var error = $root.tensorflow.magenta.NoteSequence.SourceInfo.verify(message.sourceInfo);\n                    if (error)\n                        return \"sourceInfo.\" + error;\n                }\n                if (message.textAnnotations != null && message.hasOwnProperty(\"textAnnotations\")) {\n                    if (!Array.isArray(message.textAnnotations))\n                        return \"textAnnotations: array expected\";\n                    for (var i = 0; i < message.textAnnotations.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.TextAnnotation.verify(message.textAnnotations[i]);\n                        if (error)\n                            return \"textAnnotations.\" + error;\n                    }\n                }\n                if (message.sectionAnnotations != null && message.hasOwnProperty(\"sectionAnnotations\")) {\n                    if (!Array.isArray(message.sectionAnnotations))\n                        return \"sectionAnnotations: array expected\";\n                    for (var i = 0; i < message.sectionAnnotations.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.SectionAnnotation.verify(message.sectionAnnotations[i]);\n                        if (error)\n                            return \"sectionAnnotations.\" + error;\n                    }\n                }\n                if (message.sectionGroups != null && message.hasOwnProperty(\"sectionGroups\")) {\n                    if (!Array.isArray(message.sectionGroups))\n                        return \"sectionGroups: array expected\";\n                    for (var i = 0; i < message.sectionGroups.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.SectionGroup.verify(message.sectionGroups[i]);\n                        if (error)\n                            return \"sectionGroups.\" + error;\n                    }\n                }\n                if (message.quantizationInfo != null && message.hasOwnProperty(\"quantizationInfo\")) {\n                    var error = $root.tensorflow.magenta.NoteSequence.QuantizationInfo.verify(message.quantizationInfo);\n                    if (error)\n                        return \"quantizationInfo.\" + error;\n                }\n                if (message.subsequenceInfo != null && message.hasOwnProperty(\"subsequenceInfo\")) {\n                    var error = $root.tensorflow.magenta.NoteSequence.SubsequenceInfo.verify(message.subsequenceInfo);\n                    if (error)\n                        return \"subsequenceInfo.\" + error;\n                }\n                if (message.sequenceMetadata != null && message.hasOwnProperty(\"sequenceMetadata\")) {\n                    var error = $root.tensorflow.magenta.SequenceMetadata.verify(message.sequenceMetadata);\n                    if (error)\n                        return \"sequenceMetadata.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a NoteSequence message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.magenta.NoteSequence} NoteSequence\n             */\n            NoteSequence.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.magenta.NoteSequence)\n                    return object;\n                var message = new $root.tensorflow.magenta.NoteSequence();\n                if (object.id != null)\n                    message.id = String(object.id);\n                if (object.filename != null)\n                    message.filename = String(object.filename);\n                if (object.referenceNumber != null)\n                    if ($util.Long)\n                        (message.referenceNumber = $util.Long.fromValue(object.referenceNumber)).unsigned = false;\n                    else if (typeof object.referenceNumber === \"string\")\n                        message.referenceNumber = parseInt(object.referenceNumber, 10);\n                    else if (typeof object.referenceNumber === \"number\")\n                        message.referenceNumber = object.referenceNumber;\n                    else if (typeof object.referenceNumber === \"object\")\n                        message.referenceNumber = new $util.LongBits(object.referenceNumber.low >>> 0, object.referenceNumber.high >>> 0).toNumber();\n                if (object.collectionName != null)\n                    message.collectionName = String(object.collectionName);\n                if (object.ticksPerQuarter != null)\n                    message.ticksPerQuarter = object.ticksPerQuarter | 0;\n                if (object.timeSignatures) {\n                    if (!Array.isArray(object.timeSignatures))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.timeSignatures: array expected\");\n                    message.timeSignatures = [];\n                    for (var i = 0; i < object.timeSignatures.length; ++i) {\n                        if (typeof object.timeSignatures[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.timeSignatures: object expected\");\n                        message.timeSignatures[i] = $root.tensorflow.magenta.NoteSequence.TimeSignature.fromObject(object.timeSignatures[i]);\n                    }\n                }\n                if (object.keySignatures) {\n                    if (!Array.isArray(object.keySignatures))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.keySignatures: array expected\");\n                    message.keySignatures = [];\n                    for (var i = 0; i < object.keySignatures.length; ++i) {\n                        if (typeof object.keySignatures[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.keySignatures: object expected\");\n                        message.keySignatures[i] = $root.tensorflow.magenta.NoteSequence.KeySignature.fromObject(object.keySignatures[i]);\n                    }\n                }\n                if (object.tempos) {\n                    if (!Array.isArray(object.tempos))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.tempos: array expected\");\n                    message.tempos = [];\n                    for (var i = 0; i < object.tempos.length; ++i) {\n                        if (typeof object.tempos[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.tempos: object expected\");\n                        message.tempos[i] = $root.tensorflow.magenta.NoteSequence.Tempo.fromObject(object.tempos[i]);\n                    }\n                }\n                if (object.notes) {\n                    if (!Array.isArray(object.notes))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.notes: array expected\");\n                    message.notes = [];\n                    for (var i = 0; i < object.notes.length; ++i) {\n                        if (typeof object.notes[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.notes: object expected\");\n                        message.notes[i] = $root.tensorflow.magenta.NoteSequence.Note.fromObject(object.notes[i]);\n                    }\n                }\n                if (object.totalTime != null)\n                    message.totalTime = Number(object.totalTime);\n                if (object.totalQuantizedSteps != null)\n                    if ($util.Long)\n                        (message.totalQuantizedSteps = $util.Long.fromValue(object.totalQuantizedSteps)).unsigned = false;\n                    else if (typeof object.totalQuantizedSteps === \"string\")\n                        message.totalQuantizedSteps = parseInt(object.totalQuantizedSteps, 10);\n                    else if (typeof object.totalQuantizedSteps === \"number\")\n                        message.totalQuantizedSteps = object.totalQuantizedSteps;\n                    else if (typeof object.totalQuantizedSteps === \"object\")\n                        message.totalQuantizedSteps = new $util.LongBits(object.totalQuantizedSteps.low >>> 0, object.totalQuantizedSteps.high >>> 0).toNumber();\n                if (object.pitchBends) {\n                    if (!Array.isArray(object.pitchBends))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.pitchBends: array expected\");\n                    message.pitchBends = [];\n                    for (var i = 0; i < object.pitchBends.length; ++i) {\n                        if (typeof object.pitchBends[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.pitchBends: object expected\");\n                        message.pitchBends[i] = $root.tensorflow.magenta.NoteSequence.PitchBend.fromObject(object.pitchBends[i]);\n                    }\n                }\n                if (object.controlChanges) {\n                    if (!Array.isArray(object.controlChanges))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.controlChanges: array expected\");\n                    message.controlChanges = [];\n                    for (var i = 0; i < object.controlChanges.length; ++i) {\n                        if (typeof object.controlChanges[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.controlChanges: object expected\");\n                        message.controlChanges[i] = $root.tensorflow.magenta.NoteSequence.ControlChange.fromObject(object.controlChanges[i]);\n                    }\n                }\n                if (object.partInfos) {\n                    if (!Array.isArray(object.partInfos))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.partInfos: array expected\");\n                    message.partInfos = [];\n                    for (var i = 0; i < object.partInfos.length; ++i) {\n                        if (typeof object.partInfos[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.partInfos: object expected\");\n                        message.partInfos[i] = $root.tensorflow.magenta.NoteSequence.PartInfo.fromObject(object.partInfos[i]);\n                    }\n                }\n                if (object.sourceInfo != null) {\n                    if (typeof object.sourceInfo !== \"object\")\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.sourceInfo: object expected\");\n                    message.sourceInfo = $root.tensorflow.magenta.NoteSequence.SourceInfo.fromObject(object.sourceInfo);\n                }\n                if (object.textAnnotations) {\n                    if (!Array.isArray(object.textAnnotations))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.textAnnotations: array expected\");\n                    message.textAnnotations = [];\n                    for (var i = 0; i < object.textAnnotations.length; ++i) {\n                        if (typeof object.textAnnotations[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.textAnnotations: object expected\");\n                        message.textAnnotations[i] = $root.tensorflow.magenta.NoteSequence.TextAnnotation.fromObject(object.textAnnotations[i]);\n                    }\n                }\n                if (object.sectionAnnotations) {\n                    if (!Array.isArray(object.sectionAnnotations))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.sectionAnnotations: array expected\");\n                    message.sectionAnnotations = [];\n                    for (var i = 0; i < object.sectionAnnotations.length; ++i) {\n                        if (typeof object.sectionAnnotations[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.sectionAnnotations: object expected\");\n                        message.sectionAnnotations[i] = $root.tensorflow.magenta.NoteSequence.SectionAnnotation.fromObject(object.sectionAnnotations[i]);\n                    }\n                }\n                if (object.sectionGroups) {\n                    if (!Array.isArray(object.sectionGroups))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.sectionGroups: array expected\");\n                    message.sectionGroups = [];\n                    for (var i = 0; i < object.sectionGroups.length; ++i) {\n                        if (typeof object.sectionGroups[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.sectionGroups: object expected\");\n                        message.sectionGroups[i] = $root.tensorflow.magenta.NoteSequence.SectionGroup.fromObject(object.sectionGroups[i]);\n                    }\n                }\n                if (object.quantizationInfo != null) {\n                    if (typeof object.quantizationInfo !== \"object\")\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.quantizationInfo: object expected\");\n                    message.quantizationInfo = $root.tensorflow.magenta.NoteSequence.QuantizationInfo.fromObject(object.quantizationInfo);\n                }\n                if (object.subsequenceInfo != null) {\n                    if (typeof object.subsequenceInfo !== \"object\")\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.subsequenceInfo: object expected\");\n                    message.subsequenceInfo = $root.tensorflow.magenta.NoteSequence.SubsequenceInfo.fromObject(object.subsequenceInfo);\n                }\n                if (object.sequenceMetadata != null) {\n                    if (typeof object.sequenceMetadata !== \"object\")\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.sequenceMetadata: object expected\");\n                    message.sequenceMetadata = $root.tensorflow.magenta.SequenceMetadata.fromObject(object.sequenceMetadata);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a NoteSequence message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {tensorflow.magenta.NoteSequence} message NoteSequence\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            NoteSequence.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults) {\n                    object.timeSignatures = [];\n                    object.keySignatures = [];\n                    object.tempos = [];\n                    object.notes = [];\n                    object.pitchBends = [];\n                    object.controlChanges = [];\n                    object.partInfos = [];\n                    object.textAnnotations = [];\n                    object.sectionAnnotations = [];\n                    object.sectionGroups = [];\n                }\n                if (options.defaults) {\n                    object.id = \"\";\n                    object.filename = \"\";\n                    object.collectionName = \"\";\n                    object.ticksPerQuarter = 0;\n                    object.totalTime = 0;\n                    object.sourceInfo = null;\n                    object.quantizationInfo = null;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.totalQuantizedSteps = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.totalQuantizedSteps = options.longs === String ? \"0\" : 0;\n                    object.subsequenceInfo = null;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.referenceNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.referenceNumber = options.longs === String ? \"0\" : 0;\n                    object.sequenceMetadata = null;\n                }\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    object.id = message.id;\n                if (message.filename != null && message.hasOwnProperty(\"filename\"))\n                    object.filename = message.filename;\n                if (message.collectionName != null && message.hasOwnProperty(\"collectionName\"))\n                    object.collectionName = message.collectionName;\n                if (message.ticksPerQuarter != null && message.hasOwnProperty(\"ticksPerQuarter\"))\n                    object.ticksPerQuarter = message.ticksPerQuarter;\n                if (message.timeSignatures && message.timeSignatures.length) {\n                    object.timeSignatures = [];\n                    for (var j = 0; j < message.timeSignatures.length; ++j)\n                        object.timeSignatures[j] = $root.tensorflow.magenta.NoteSequence.TimeSignature.toObject(message.timeSignatures[j], options);\n                }\n                if (message.keySignatures && message.keySignatures.length) {\n                    object.keySignatures = [];\n                    for (var j = 0; j < message.keySignatures.length; ++j)\n                        object.keySignatures[j] = $root.tensorflow.magenta.NoteSequence.KeySignature.toObject(message.keySignatures[j], options);\n                }\n                if (message.tempos && message.tempos.length) {\n                    object.tempos = [];\n                    for (var j = 0; j < message.tempos.length; ++j)\n                        object.tempos[j] = $root.tensorflow.magenta.NoteSequence.Tempo.toObject(message.tempos[j], options);\n                }\n                if (message.notes && message.notes.length) {\n                    object.notes = [];\n                    for (var j = 0; j < message.notes.length; ++j)\n                        object.notes[j] = $root.tensorflow.magenta.NoteSequence.Note.toObject(message.notes[j], options);\n                }\n                if (message.totalTime != null && message.hasOwnProperty(\"totalTime\"))\n                    object.totalTime = options.json && !isFinite(message.totalTime) ? String(message.totalTime) : message.totalTime;\n                if (message.pitchBends && message.pitchBends.length) {\n                    object.pitchBends = [];\n                    for (var j = 0; j < message.pitchBends.length; ++j)\n                        object.pitchBends[j] = $root.tensorflow.magenta.NoteSequence.PitchBend.toObject(message.pitchBends[j], options);\n                }\n                if (message.controlChanges && message.controlChanges.length) {\n                    object.controlChanges = [];\n                    for (var j = 0; j < message.controlChanges.length; ++j)\n                        object.controlChanges[j] = $root.tensorflow.magenta.NoteSequence.ControlChange.toObject(message.controlChanges[j], options);\n                }\n                if (message.partInfos && message.partInfos.length) {\n                    object.partInfos = [];\n                    for (var j = 0; j < message.partInfos.length; ++j)\n                        object.partInfos[j] = $root.tensorflow.magenta.NoteSequence.PartInfo.toObject(message.partInfos[j], options);\n                }\n                if (message.sourceInfo != null && message.hasOwnProperty(\"sourceInfo\"))\n                    object.sourceInfo = $root.tensorflow.magenta.NoteSequence.SourceInfo.toObject(message.sourceInfo, options);\n                if (message.textAnnotations && message.textAnnotations.length) {\n                    object.textAnnotations = [];\n                    for (var j = 0; j < message.textAnnotations.length; ++j)\n                        object.textAnnotations[j] = $root.tensorflow.magenta.NoteSequence.TextAnnotation.toObject(message.textAnnotations[j], options);\n                }\n                if (message.quantizationInfo != null && message.hasOwnProperty(\"quantizationInfo\"))\n                    object.quantizationInfo = $root.tensorflow.magenta.NoteSequence.QuantizationInfo.toObject(message.quantizationInfo, options);\n                if (message.totalQuantizedSteps != null && message.hasOwnProperty(\"totalQuantizedSteps\"))\n                    if (typeof message.totalQuantizedSteps === \"number\")\n                        object.totalQuantizedSteps = options.longs === String ? String(message.totalQuantizedSteps) : message.totalQuantizedSteps;\n                    else\n                        object.totalQuantizedSteps = options.longs === String ? $util.Long.prototype.toString.call(message.totalQuantizedSteps) : options.longs === Number ? new $util.LongBits(message.totalQuantizedSteps.low >>> 0, message.totalQuantizedSteps.high >>> 0).toNumber() : message.totalQuantizedSteps;\n                if (message.subsequenceInfo != null && message.hasOwnProperty(\"subsequenceInfo\"))\n                    object.subsequenceInfo = $root.tensorflow.magenta.NoteSequence.SubsequenceInfo.toObject(message.subsequenceInfo, options);\n                if (message.referenceNumber != null && message.hasOwnProperty(\"referenceNumber\"))\n                    if (typeof message.referenceNumber === \"number\")\n                        object.referenceNumber = options.longs === String ? String(message.referenceNumber) : message.referenceNumber;\n                    else\n                        object.referenceNumber = options.longs === String ? $util.Long.prototype.toString.call(message.referenceNumber) : options.longs === Number ? new $util.LongBits(message.referenceNumber.low >>> 0, message.referenceNumber.high >>> 0).toNumber() : message.referenceNumber;\n                if (message.sequenceMetadata != null && message.hasOwnProperty(\"sequenceMetadata\"))\n                    object.sequenceMetadata = $root.tensorflow.magenta.SequenceMetadata.toObject(message.sequenceMetadata, options);\n                if (message.sectionAnnotations && message.sectionAnnotations.length) {\n                    object.sectionAnnotations = [];\n                    for (var j = 0; j < message.sectionAnnotations.length; ++j)\n                        object.sectionAnnotations[j] = $root.tensorflow.magenta.NoteSequence.SectionAnnotation.toObject(message.sectionAnnotations[j], options);\n                }\n                if (message.sectionGroups && message.sectionGroups.length) {\n                    object.sectionGroups = [];\n                    for (var j = 0; j < message.sectionGroups.length; ++j)\n                        object.sectionGroups[j] = $root.tensorflow.magenta.NoteSequence.SectionGroup.toObject(message.sectionGroups[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this NoteSequence to JSON.\n             * @function toJSON\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            NoteSequence.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            NoteSequence.Note = (function() {\n\n                /**\n                 * Properties of a Note.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface INote\n                 * @property {number|null} [pitch] Note pitch\n                 * @property {tensorflow.magenta.NoteSequence.PitchName|null} [pitchName] Note pitchName\n                 * @property {number|null} [velocity] Note velocity\n                 * @property {number|null} [startTime] Note startTime\n                 * @property {number|null} [quantizedStartStep] Note quantizedStartStep\n                 * @property {number|null} [endTime] Note endTime\n                 * @property {number|null} [quantizedEndStep] Note quantizedEndStep\n                 * @property {number|null} [numerator] Note numerator\n                 * @property {number|null} [denominator] Note denominator\n                 * @property {number|null} [instrument] Note instrument\n                 * @property {number|null} [program] Note program\n                 * @property {boolean|null} [isDrum] Note isDrum\n                 * @property {number|null} [part] Note part\n                 * @property {number|null} [voice] Note voice\n                 */\n\n                /**\n                 * Constructs a new Note.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a Note.\n                 * @implements INote\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.INote=} [properties] Properties to set\n                 */\n                function Note(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Note pitch.\n                 * @member {number} pitch\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.pitch = 0;\n\n                /**\n                 * Note pitchName.\n                 * @member {tensorflow.magenta.NoteSequence.PitchName} pitchName\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.pitchName = 0;\n\n                /**\n                 * Note velocity.\n                 * @member {number} velocity\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.velocity = 0;\n\n                /**\n                 * Note startTime.\n                 * @member {number} startTime\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.startTime = 0;\n\n                /**\n                 * Note quantizedStartStep.\n                 * @member {number} quantizedStartStep\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.quantizedStartStep = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Note endTime.\n                 * @member {number} endTime\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.endTime = 0;\n\n                /**\n                 * Note quantizedEndStep.\n                 * @member {number} quantizedEndStep\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.quantizedEndStep = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Note numerator.\n                 * @member {number} numerator\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.numerator = 0;\n\n                /**\n                 * Note denominator.\n                 * @member {number} denominator\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.denominator = 0;\n\n                /**\n                 * Note instrument.\n                 * @member {number} instrument\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.instrument = 0;\n\n                /**\n                 * Note program.\n                 * @member {number} program\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.program = 0;\n\n                /**\n                 * Note isDrum.\n                 * @member {boolean} isDrum\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.isDrum = false;\n\n                /**\n                 * Note part.\n                 * @member {number} part\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.part = 0;\n\n                /**\n                 * Note voice.\n                 * @member {number} voice\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.voice = 0;\n\n                /**\n                 * Creates a new Note instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.INote=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.Note} Note instance\n                 */\n                Note.create = function create(properties) {\n                    return new Note(properties);\n                };\n\n                /**\n                 * Encodes the specified Note message. Does not implicitly {@link tensorflow.magenta.NoteSequence.Note.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.INote} message Note message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Note.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.pitch != null && message.hasOwnProperty(\"pitch\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.pitch);\n                    if (message.velocity != null && message.hasOwnProperty(\"velocity\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.velocity);\n                    if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                        writer.uint32(/* id 3, wireType 1 =*/25).double(message.startTime);\n                    if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                        writer.uint32(/* id 4, wireType 1 =*/33).double(message.endTime);\n                    if (message.numerator != null && message.hasOwnProperty(\"numerator\"))\n                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.numerator);\n                    if (message.denominator != null && message.hasOwnProperty(\"denominator\"))\n                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.denominator);\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.instrument);\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.program);\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        writer.uint32(/* id 9, wireType 0 =*/72).bool(message.isDrum);\n                    if (message.part != null && message.hasOwnProperty(\"part\"))\n                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.part);\n                    if (message.pitchName != null && message.hasOwnProperty(\"pitchName\"))\n                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.pitchName);\n                    if (message.voice != null && message.hasOwnProperty(\"voice\"))\n                        writer.uint32(/* id 12, wireType 0 =*/96).int32(message.voice);\n                    if (message.quantizedStartStep != null && message.hasOwnProperty(\"quantizedStartStep\"))\n                        writer.uint32(/* id 13, wireType 0 =*/104).int64(message.quantizedStartStep);\n                    if (message.quantizedEndStep != null && message.hasOwnProperty(\"quantizedEndStep\"))\n                        writer.uint32(/* id 14, wireType 0 =*/112).int64(message.quantizedEndStep);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Note message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.Note.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.INote} message Note message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Note.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Note message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.Note} Note\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Note.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.Note();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.pitch = reader.int32();\n                            break;\n                        case 11:\n                            message.pitchName = reader.int32();\n                            break;\n                        case 2:\n                            message.velocity = reader.int32();\n                            break;\n                        case 3:\n                            message.startTime = reader.double();\n                            break;\n                        case 13:\n                            message.quantizedStartStep = $util.Long?reader.int64().toNumber():reader.int64();\n                            break;\n                        case 4:\n                            message.endTime = reader.double();\n                            break;\n                        case 14:\n                            message.quantizedEndStep = $util.Long?reader.int64().toNumber():reader.int64();\n                            break;\n                        case 5:\n                            message.numerator = reader.int32();\n                            break;\n                        case 6:\n                            message.denominator = reader.int32();\n                            break;\n                        case 7:\n                            message.instrument = reader.int32();\n                            break;\n                        case 8:\n                            message.program = reader.int32();\n                            break;\n                        case 9:\n                            message.isDrum = reader.bool();\n                            break;\n                        case 10:\n                            message.part = reader.int32();\n                            break;\n                        case 12:\n                            message.voice = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Note message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.Note} Note\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Note.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Note message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Note.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.pitch != null && message.hasOwnProperty(\"pitch\"))\n                        if (!$util.isInteger(message.pitch))\n                            return \"pitch: integer expected\";\n                    if (message.pitchName != null && message.hasOwnProperty(\"pitchName\"))\n                        switch (message.pitchName) {\n                        default:\n                            return \"pitchName: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                        case 17:\n                        case 18:\n                        case 19:\n                        case 20:\n                        case 21:\n                        case 22:\n                        case 23:\n                        case 24:\n                        case 25:\n                        case 26:\n                        case 27:\n                        case 28:\n                        case 29:\n                        case 30:\n                        case 31:\n                        case 32:\n                        case 33:\n                        case 34:\n                        case 35:\n                            break;\n                        }\n                    if (message.velocity != null && message.hasOwnProperty(\"velocity\"))\n                        if (!$util.isInteger(message.velocity))\n                            return \"velocity: integer expected\";\n                    if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                        if (typeof message.startTime !== \"number\")\n                            return \"startTime: number expected\";\n                    if (message.quantizedStartStep != null && message.hasOwnProperty(\"quantizedStartStep\"))\n                        if (!$util.isInteger(message.quantizedStartStep) && !(message.quantizedStartStep && $util.isInteger(message.quantizedStartStep.low) && $util.isInteger(message.quantizedStartStep.high)))\n                            return \"quantizedStartStep: integer|Long expected\";\n                    if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                        if (typeof message.endTime !== \"number\")\n                            return \"endTime: number expected\";\n                    if (message.quantizedEndStep != null && message.hasOwnProperty(\"quantizedEndStep\"))\n                        if (!$util.isInteger(message.quantizedEndStep) && !(message.quantizedEndStep && $util.isInteger(message.quantizedEndStep.low) && $util.isInteger(message.quantizedEndStep.high)))\n                            return \"quantizedEndStep: integer|Long expected\";\n                    if (message.numerator != null && message.hasOwnProperty(\"numerator\"))\n                        if (!$util.isInteger(message.numerator))\n                            return \"numerator: integer expected\";\n                    if (message.denominator != null && message.hasOwnProperty(\"denominator\"))\n                        if (!$util.isInteger(message.denominator))\n                            return \"denominator: integer expected\";\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        if (!$util.isInteger(message.instrument))\n                            return \"instrument: integer expected\";\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        if (!$util.isInteger(message.program))\n                            return \"program: integer expected\";\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        if (typeof message.isDrum !== \"boolean\")\n                            return \"isDrum: boolean expected\";\n                    if (message.part != null && message.hasOwnProperty(\"part\"))\n                        if (!$util.isInteger(message.part))\n                            return \"part: integer expected\";\n                    if (message.voice != null && message.hasOwnProperty(\"voice\"))\n                        if (!$util.isInteger(message.voice))\n                            return \"voice: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a Note message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.Note} Note\n                 */\n                Note.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.Note)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.Note();\n                    if (object.pitch != null)\n                        message.pitch = object.pitch | 0;\n                    switch (object.pitchName) {\n                    case \"UNKNOWN_PITCH_NAME\":\n                    case 0:\n                        message.pitchName = 0;\n                        break;\n                    case \"F_FLAT_FLAT\":\n                    case 1:\n                        message.pitchName = 1;\n                        break;\n                    case \"C_FLAT_FLAT\":\n                    case 2:\n                        message.pitchName = 2;\n                        break;\n                    case \"G_FLAT_FLAT\":\n                    case 3:\n                        message.pitchName = 3;\n                        break;\n                    case \"D_FLAT_FLAT\":\n                    case 4:\n                        message.pitchName = 4;\n                        break;\n                    case \"A_FLAT_FLAT\":\n                    case 5:\n                        message.pitchName = 5;\n                        break;\n                    case \"E_FLAT_FLAT\":\n                    case 6:\n                        message.pitchName = 6;\n                        break;\n                    case \"B_FLAT_FLAT\":\n                    case 7:\n                        message.pitchName = 7;\n                        break;\n                    case \"F_FLAT\":\n                    case 8:\n                        message.pitchName = 8;\n                        break;\n                    case \"C_FLAT\":\n                    case 9:\n                        message.pitchName = 9;\n                        break;\n                    case \"G_FLAT\":\n                    case 10:\n                        message.pitchName = 10;\n                        break;\n                    case \"D_FLAT\":\n                    case 11:\n                        message.pitchName = 11;\n                        break;\n                    case \"A_FLAT\":\n                    case 12:\n                        message.pitchName = 12;\n                        break;\n                    case \"E_FLAT\":\n                    case 13:\n                        message.pitchName = 13;\n                        break;\n                    case \"B_FLAT\":\n                    case 14:\n                        message.pitchName = 14;\n                        break;\n                    case \"F\":\n                    case 15:\n                        message.pitchName = 15;\n                        break;\n                    case \"C\":\n                    case 16:\n                        message.pitchName = 16;\n                        break;\n                    case \"G\":\n                    case 17:\n                        message.pitchName = 17;\n                        break;\n                    case \"D\":\n                    case 18:\n                        message.pitchName = 18;\n                        break;\n                    case \"A\":\n                    case 19:\n                        message.pitchName = 19;\n                        break;\n                    case \"E\":\n                    case 20:\n                        message.pitchName = 20;\n                        break;\n                    case \"B\":\n                    case 21:\n                        message.pitchName = 21;\n                        break;\n                    case \"F_SHARP\":\n                    case 22:\n                        message.pitchName = 22;\n                        break;\n                    case \"C_SHARP\":\n                    case 23:\n                        message.pitchName = 23;\n                        break;\n                    case \"G_SHARP\":\n                    case 24:\n                        message.pitchName = 24;\n                        break;\n                    case \"D_SHARP\":\n                    case 25:\n                        message.pitchName = 25;\n                        break;\n                    case \"A_SHARP\":\n                    case 26:\n                        message.pitchName = 26;\n                        break;\n                    case \"E_SHARP\":\n                    case 27:\n                        message.pitchName = 27;\n                        break;\n                    case \"B_SHARP\":\n                    case 28:\n                        message.pitchName = 28;\n                        break;\n                    case \"F_SHARP_SHARP\":\n                    case 29:\n                        message.pitchName = 29;\n                        break;\n                    case \"C_SHARP_SHARP\":\n                    case 30:\n                        message.pitchName = 30;\n                        break;\n                    case \"G_SHARP_SHARP\":\n                    case 31:\n                        message.pitchName = 31;\n                        break;\n                    case \"D_SHARP_SHARP\":\n                    case 32:\n                        message.pitchName = 32;\n                        break;\n                    case \"A_SHARP_SHARP\":\n                    case 33:\n                        message.pitchName = 33;\n                        break;\n                    case \"E_SHARP_SHARP\":\n                    case 34:\n                        message.pitchName = 34;\n                        break;\n                    case \"B_SHARP_SHARP\":\n                    case 35:\n                        message.pitchName = 35;\n                        break;\n                    }\n                    if (object.velocity != null)\n                        message.velocity = object.velocity | 0;\n                    if (object.startTime != null)\n                        message.startTime = Number(object.startTime);\n                    if (object.quantizedStartStep != null)\n                        if ($util.Long)\n                            (message.quantizedStartStep = $util.Long.fromValue(object.quantizedStartStep)).unsigned = false;\n                        else if (typeof object.quantizedStartStep === \"string\")\n                            message.quantizedStartStep = parseInt(object.quantizedStartStep, 10);\n                        else if (typeof object.quantizedStartStep === \"number\")\n                            message.quantizedStartStep = object.quantizedStartStep;\n                        else if (typeof object.quantizedStartStep === \"object\")\n                            message.quantizedStartStep = new $util.LongBits(object.quantizedStartStep.low >>> 0, object.quantizedStartStep.high >>> 0).toNumber();\n                    if (object.endTime != null)\n                        message.endTime = Number(object.endTime);\n                    if (object.quantizedEndStep != null)\n                        if ($util.Long)\n                            (message.quantizedEndStep = $util.Long.fromValue(object.quantizedEndStep)).unsigned = false;\n                        else if (typeof object.quantizedEndStep === \"string\")\n                            message.quantizedEndStep = parseInt(object.quantizedEndStep, 10);\n                        else if (typeof object.quantizedEndStep === \"number\")\n                            message.quantizedEndStep = object.quantizedEndStep;\n                        else if (typeof object.quantizedEndStep === \"object\")\n                            message.quantizedEndStep = new $util.LongBits(object.quantizedEndStep.low >>> 0, object.quantizedEndStep.high >>> 0).toNumber();\n                    if (object.numerator != null)\n                        message.numerator = object.numerator | 0;\n                    if (object.denominator != null)\n                        message.denominator = object.denominator | 0;\n                    if (object.instrument != null)\n                        message.instrument = object.instrument | 0;\n                    if (object.program != null)\n                        message.program = object.program | 0;\n                    if (object.isDrum != null)\n                        message.isDrum = Boolean(object.isDrum);\n                    if (object.part != null)\n                        message.part = object.part | 0;\n                    if (object.voice != null)\n                        message.voice = object.voice | 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Note message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.Note} message Note\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Note.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.pitch = 0;\n                        object.velocity = 0;\n                        object.startTime = 0;\n                        object.endTime = 0;\n                        object.numerator = 0;\n                        object.denominator = 0;\n                        object.instrument = 0;\n                        object.program = 0;\n                        object.isDrum = false;\n                        object.part = 0;\n                        object.pitchName = options.enums === String ? \"UNKNOWN_PITCH_NAME\" : 0;\n                        object.voice = 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.quantizedStartStep = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.quantizedStartStep = options.longs === String ? \"0\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.quantizedEndStep = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.quantizedEndStep = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.pitch != null && message.hasOwnProperty(\"pitch\"))\n                        object.pitch = message.pitch;\n                    if (message.velocity != null && message.hasOwnProperty(\"velocity\"))\n                        object.velocity = message.velocity;\n                    if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                        object.startTime = options.json && !isFinite(message.startTime) ? String(message.startTime) : message.startTime;\n                    if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                        object.endTime = options.json && !isFinite(message.endTime) ? String(message.endTime) : message.endTime;\n                    if (message.numerator != null && message.hasOwnProperty(\"numerator\"))\n                        object.numerator = message.numerator;\n                    if (message.denominator != null && message.hasOwnProperty(\"denominator\"))\n                        object.denominator = message.denominator;\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        object.instrument = message.instrument;\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        object.program = message.program;\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        object.isDrum = message.isDrum;\n                    if (message.part != null && message.hasOwnProperty(\"part\"))\n                        object.part = message.part;\n                    if (message.pitchName != null && message.hasOwnProperty(\"pitchName\"))\n                        object.pitchName = options.enums === String ? $root.tensorflow.magenta.NoteSequence.PitchName[message.pitchName] : message.pitchName;\n                    if (message.voice != null && message.hasOwnProperty(\"voice\"))\n                        object.voice = message.voice;\n                    if (message.quantizedStartStep != null && message.hasOwnProperty(\"quantizedStartStep\"))\n                        if (typeof message.quantizedStartStep === \"number\")\n                            object.quantizedStartStep = options.longs === String ? String(message.quantizedStartStep) : message.quantizedStartStep;\n                        else\n                            object.quantizedStartStep = options.longs === String ? $util.Long.prototype.toString.call(message.quantizedStartStep) : options.longs === Number ? new $util.LongBits(message.quantizedStartStep.low >>> 0, message.quantizedStartStep.high >>> 0).toNumber() : message.quantizedStartStep;\n                    if (message.quantizedEndStep != null && message.hasOwnProperty(\"quantizedEndStep\"))\n                        if (typeof message.quantizedEndStep === \"number\")\n                            object.quantizedEndStep = options.longs === String ? String(message.quantizedEndStep) : message.quantizedEndStep;\n                        else\n                            object.quantizedEndStep = options.longs === String ? $util.Long.prototype.toString.call(message.quantizedEndStep) : options.longs === Number ? new $util.LongBits(message.quantizedEndStep.low >>> 0, message.quantizedEndStep.high >>> 0).toNumber() : message.quantizedEndStep;\n                    return object;\n                };\n\n                /**\n                 * Converts this Note to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Note.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Note;\n            })();\n\n            /**\n             * PitchName enum.\n             * @name tensorflow.magenta.NoteSequence.PitchName\n             * @enum {string}\n             * @property {number} UNKNOWN_PITCH_NAME=0 UNKNOWN_PITCH_NAME value\n             * @property {number} F_FLAT_FLAT=1 F_FLAT_FLAT value\n             * @property {number} C_FLAT_FLAT=2 C_FLAT_FLAT value\n             * @property {number} G_FLAT_FLAT=3 G_FLAT_FLAT value\n             * @property {number} D_FLAT_FLAT=4 D_FLAT_FLAT value\n             * @property {number} A_FLAT_FLAT=5 A_FLAT_FLAT value\n             * @property {number} E_FLAT_FLAT=6 E_FLAT_FLAT value\n             * @property {number} B_FLAT_FLAT=7 B_FLAT_FLAT value\n             * @property {number} F_FLAT=8 F_FLAT value\n             * @property {number} C_FLAT=9 C_FLAT value\n             * @property {number} G_FLAT=10 G_FLAT value\n             * @property {number} D_FLAT=11 D_FLAT value\n             * @property {number} A_FLAT=12 A_FLAT value\n             * @property {number} E_FLAT=13 E_FLAT value\n             * @property {number} B_FLAT=14 B_FLAT value\n             * @property {number} F=15 F value\n             * @property {number} C=16 C value\n             * @property {number} G=17 G value\n             * @property {number} D=18 D value\n             * @property {number} A=19 A value\n             * @property {number} E=20 E value\n             * @property {number} B=21 B value\n             * @property {number} F_SHARP=22 F_SHARP value\n             * @property {number} C_SHARP=23 C_SHARP value\n             * @property {number} G_SHARP=24 G_SHARP value\n             * @property {number} D_SHARP=25 D_SHARP value\n             * @property {number} A_SHARP=26 A_SHARP value\n             * @property {number} E_SHARP=27 E_SHARP value\n             * @property {number} B_SHARP=28 B_SHARP value\n             * @property {number} F_SHARP_SHARP=29 F_SHARP_SHARP value\n             * @property {number} C_SHARP_SHARP=30 C_SHARP_SHARP value\n             * @property {number} G_SHARP_SHARP=31 G_SHARP_SHARP value\n             * @property {number} D_SHARP_SHARP=32 D_SHARP_SHARP value\n             * @property {number} A_SHARP_SHARP=33 A_SHARP_SHARP value\n             * @property {number} E_SHARP_SHARP=34 E_SHARP_SHARP value\n             * @property {number} B_SHARP_SHARP=35 B_SHARP_SHARP value\n             */\n            NoteSequence.PitchName = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"UNKNOWN_PITCH_NAME\"] = 0;\n                values[valuesById[1] = \"F_FLAT_FLAT\"] = 1;\n                values[valuesById[2] = \"C_FLAT_FLAT\"] = 2;\n                values[valuesById[3] = \"G_FLAT_FLAT\"] = 3;\n                values[valuesById[4] = \"D_FLAT_FLAT\"] = 4;\n                values[valuesById[5] = \"A_FLAT_FLAT\"] = 5;\n                values[valuesById[6] = \"E_FLAT_FLAT\"] = 6;\n                values[valuesById[7] = \"B_FLAT_FLAT\"] = 7;\n                values[valuesById[8] = \"F_FLAT\"] = 8;\n                values[valuesById[9] = \"C_FLAT\"] = 9;\n                values[valuesById[10] = \"G_FLAT\"] = 10;\n                values[valuesById[11] = \"D_FLAT\"] = 11;\n                values[valuesById[12] = \"A_FLAT\"] = 12;\n                values[valuesById[13] = \"E_FLAT\"] = 13;\n                values[valuesById[14] = \"B_FLAT\"] = 14;\n                values[valuesById[15] = \"F\"] = 15;\n                values[valuesById[16] = \"C\"] = 16;\n                values[valuesById[17] = \"G\"] = 17;\n                values[valuesById[18] = \"D\"] = 18;\n                values[valuesById[19] = \"A\"] = 19;\n                values[valuesById[20] = \"E\"] = 20;\n                values[valuesById[21] = \"B\"] = 21;\n                values[valuesById[22] = \"F_SHARP\"] = 22;\n                values[valuesById[23] = \"C_SHARP\"] = 23;\n                values[valuesById[24] = \"G_SHARP\"] = 24;\n                values[valuesById[25] = \"D_SHARP\"] = 25;\n                values[valuesById[26] = \"A_SHARP\"] = 26;\n                values[valuesById[27] = \"E_SHARP\"] = 27;\n                values[valuesById[28] = \"B_SHARP\"] = 28;\n                values[valuesById[29] = \"F_SHARP_SHARP\"] = 29;\n                values[valuesById[30] = \"C_SHARP_SHARP\"] = 30;\n                values[valuesById[31] = \"G_SHARP_SHARP\"] = 31;\n                values[valuesById[32] = \"D_SHARP_SHARP\"] = 32;\n                values[valuesById[33] = \"A_SHARP_SHARP\"] = 33;\n                values[valuesById[34] = \"E_SHARP_SHARP\"] = 34;\n                values[valuesById[35] = \"B_SHARP_SHARP\"] = 35;\n                return values;\n            })();\n\n            NoteSequence.TimeSignature = (function() {\n\n                /**\n                 * Properties of a TimeSignature.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ITimeSignature\n                 * @property {number|null} [time] TimeSignature time\n                 * @property {number|null} [numerator] TimeSignature numerator\n                 * @property {number|null} [denominator] TimeSignature denominator\n                 */\n\n                /**\n                 * Constructs a new TimeSignature.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a TimeSignature.\n                 * @implements ITimeSignature\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ITimeSignature=} [properties] Properties to set\n                 */\n                function TimeSignature(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TimeSignature time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @instance\n                 */\n                TimeSignature.prototype.time = 0;\n\n                /**\n                 * TimeSignature numerator.\n                 * @member {number} numerator\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @instance\n                 */\n                TimeSignature.prototype.numerator = 0;\n\n                /**\n                 * TimeSignature denominator.\n                 * @member {number} denominator\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @instance\n                 */\n                TimeSignature.prototype.denominator = 0;\n\n                /**\n                 * Creates a new TimeSignature instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITimeSignature=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.TimeSignature} TimeSignature instance\n                 */\n                TimeSignature.create = function create(properties) {\n                    return new TimeSignature(properties);\n                };\n\n                /**\n                 * Encodes the specified TimeSignature message. Does not implicitly {@link tensorflow.magenta.NoteSequence.TimeSignature.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITimeSignature} message TimeSignature message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TimeSignature.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.numerator != null && message.hasOwnProperty(\"numerator\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.numerator);\n                    if (message.denominator != null && message.hasOwnProperty(\"denominator\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.denominator);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TimeSignature message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.TimeSignature.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITimeSignature} message TimeSignature message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TimeSignature.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TimeSignature message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.TimeSignature} TimeSignature\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TimeSignature.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.TimeSignature();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 2:\n                            message.numerator = reader.int32();\n                            break;\n                        case 3:\n                            message.denominator = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TimeSignature message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.TimeSignature} TimeSignature\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TimeSignature.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TimeSignature message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TimeSignature.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.numerator != null && message.hasOwnProperty(\"numerator\"))\n                        if (!$util.isInteger(message.numerator))\n                            return \"numerator: integer expected\";\n                    if (message.denominator != null && message.hasOwnProperty(\"denominator\"))\n                        if (!$util.isInteger(message.denominator))\n                            return \"denominator: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a TimeSignature message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.TimeSignature} TimeSignature\n                 */\n                TimeSignature.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.TimeSignature)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.TimeSignature();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    if (object.numerator != null)\n                        message.numerator = object.numerator | 0;\n                    if (object.denominator != null)\n                        message.denominator = object.denominator | 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TimeSignature message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.TimeSignature} message TimeSignature\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TimeSignature.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        object.numerator = 0;\n                        object.denominator = 0;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.numerator != null && message.hasOwnProperty(\"numerator\"))\n                        object.numerator = message.numerator;\n                    if (message.denominator != null && message.hasOwnProperty(\"denominator\"))\n                        object.denominator = message.denominator;\n                    return object;\n                };\n\n                /**\n                 * Converts this TimeSignature to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TimeSignature.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return TimeSignature;\n            })();\n\n            NoteSequence.KeySignature = (function() {\n\n                /**\n                 * Properties of a KeySignature.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface IKeySignature\n                 * @property {number|null} [time] KeySignature time\n                 * @property {tensorflow.magenta.NoteSequence.KeySignature.Key|null} [key] KeySignature key\n                 * @property {tensorflow.magenta.NoteSequence.KeySignature.Mode|null} [mode] KeySignature mode\n                 */\n\n                /**\n                 * Constructs a new KeySignature.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a KeySignature.\n                 * @implements IKeySignature\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.IKeySignature=} [properties] Properties to set\n                 */\n                function KeySignature(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * KeySignature time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @instance\n                 */\n                KeySignature.prototype.time = 0;\n\n                /**\n                 * KeySignature key.\n                 * @member {tensorflow.magenta.NoteSequence.KeySignature.Key} key\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @instance\n                 */\n                KeySignature.prototype.key = 0;\n\n                /**\n                 * KeySignature mode.\n                 * @member {tensorflow.magenta.NoteSequence.KeySignature.Mode} mode\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @instance\n                 */\n                KeySignature.prototype.mode = 0;\n\n                /**\n                 * Creates a new KeySignature instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IKeySignature=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.KeySignature} KeySignature instance\n                 */\n                KeySignature.create = function create(properties) {\n                    return new KeySignature(properties);\n                };\n\n                /**\n                 * Encodes the specified KeySignature message. Does not implicitly {@link tensorflow.magenta.NoteSequence.KeySignature.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IKeySignature} message KeySignature message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                KeySignature.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.key != null && message.hasOwnProperty(\"key\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.key);\n                    if (message.mode != null && message.hasOwnProperty(\"mode\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.mode);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified KeySignature message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.KeySignature.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IKeySignature} message KeySignature message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                KeySignature.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a KeySignature message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.KeySignature} KeySignature\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                KeySignature.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.KeySignature();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 2:\n                            message.key = reader.int32();\n                            break;\n                        case 3:\n                            message.mode = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a KeySignature message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.KeySignature} KeySignature\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                KeySignature.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a KeySignature message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                KeySignature.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.key != null && message.hasOwnProperty(\"key\"))\n                        switch (message.key) {\n                        default:\n                            return \"key: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 10:\n                        case 11:\n                            break;\n                        }\n                    if (message.mode != null && message.hasOwnProperty(\"mode\"))\n                        switch (message.mode) {\n                        default:\n                            return \"mode: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                            break;\n                        }\n                    return null;\n                };\n\n                /**\n                 * Creates a KeySignature message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.KeySignature} KeySignature\n                 */\n                KeySignature.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.KeySignature)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.KeySignature();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    switch (object.key) {\n                    case \"C\":\n                    case 0:\n                        message.key = 0;\n                        break;\n                    case \"C_SHARP\":\n                    case 1:\n                        message.key = 1;\n                        break;\n                    case \"D_FLAT\":\n                    case 1:\n                        message.key = 1;\n                        break;\n                    case \"D\":\n                    case 2:\n                        message.key = 2;\n                        break;\n                    case \"D_SHARP\":\n                    case 3:\n                        message.key = 3;\n                        break;\n                    case \"E_FLAT\":\n                    case 3:\n                        message.key = 3;\n                        break;\n                    case \"E\":\n                    case 4:\n                        message.key = 4;\n                        break;\n                    case \"F\":\n                    case 5:\n                        message.key = 5;\n                        break;\n                    case \"F_SHARP\":\n                    case 6:\n                        message.key = 6;\n                        break;\n                    case \"G_FLAT\":\n                    case 6:\n                        message.key = 6;\n                        break;\n                    case \"G\":\n                    case 7:\n                        message.key = 7;\n                        break;\n                    case \"G_SHARP\":\n                    case 8:\n                        message.key = 8;\n                        break;\n                    case \"A_FLAT\":\n                    case 8:\n                        message.key = 8;\n                        break;\n                    case \"A\":\n                    case 9:\n                        message.key = 9;\n                        break;\n                    case \"A_SHARP\":\n                    case 10:\n                        message.key = 10;\n                        break;\n                    case \"B_FLAT\":\n                    case 10:\n                        message.key = 10;\n                        break;\n                    case \"B\":\n                    case 11:\n                        message.key = 11;\n                        break;\n                    }\n                    switch (object.mode) {\n                    case \"MAJOR\":\n                    case 0:\n                        message.mode = 0;\n                        break;\n                    case \"MINOR\":\n                    case 1:\n                        message.mode = 1;\n                        break;\n                    case \"NOT_SPECIFIED\":\n                    case 2:\n                        message.mode = 2;\n                        break;\n                    case \"MIXOLYDIAN\":\n                    case 3:\n                        message.mode = 3;\n                        break;\n                    case \"DORIAN\":\n                    case 4:\n                        message.mode = 4;\n                        break;\n                    case \"PHRYGIAN\":\n                    case 5:\n                        message.mode = 5;\n                        break;\n                    case \"LYDIAN\":\n                    case 6:\n                        message.mode = 6;\n                        break;\n                    case \"LOCRIAN\":\n                    case 7:\n                        message.mode = 7;\n                        break;\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a KeySignature message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.KeySignature} message KeySignature\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                KeySignature.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        object.key = options.enums === String ? \"C\" : 0;\n                        object.mode = options.enums === String ? \"MAJOR\" : 0;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.key != null && message.hasOwnProperty(\"key\"))\n                        object.key = options.enums === String ? $root.tensorflow.magenta.NoteSequence.KeySignature.Key[message.key] : message.key;\n                    if (message.mode != null && message.hasOwnProperty(\"mode\"))\n                        object.mode = options.enums === String ? $root.tensorflow.magenta.NoteSequence.KeySignature.Mode[message.mode] : message.mode;\n                    return object;\n                };\n\n                /**\n                 * Converts this KeySignature to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                KeySignature.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                /**\n                 * Key enum.\n                 * @name tensorflow.magenta.NoteSequence.KeySignature.Key\n                 * @enum {string}\n                 * @property {number} C=0 C value\n                 * @property {number} C_SHARP=1 C_SHARP value\n                 * @property {number} D_FLAT=1 D_FLAT value\n                 * @property {number} D=2 D value\n                 * @property {number} D_SHARP=3 D_SHARP value\n                 * @property {number} E_FLAT=3 E_FLAT value\n                 * @property {number} E=4 E value\n                 * @property {number} F=5 F value\n                 * @property {number} F_SHARP=6 F_SHARP value\n                 * @property {number} G_FLAT=6 G_FLAT value\n                 * @property {number} G=7 G value\n                 * @property {number} G_SHARP=8 G_SHARP value\n                 * @property {number} A_FLAT=8 A_FLAT value\n                 * @property {number} A=9 A value\n                 * @property {number} A_SHARP=10 A_SHARP value\n                 * @property {number} B_FLAT=10 B_FLAT value\n                 * @property {number} B=11 B value\n                 */\n                KeySignature.Key = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"C\"] = 0;\n                    values[valuesById[1] = \"C_SHARP\"] = 1;\n                    values[\"D_FLAT\"] = 1;\n                    values[valuesById[2] = \"D\"] = 2;\n                    values[valuesById[3] = \"D_SHARP\"] = 3;\n                    values[\"E_FLAT\"] = 3;\n                    values[valuesById[4] = \"E\"] = 4;\n                    values[valuesById[5] = \"F\"] = 5;\n                    values[valuesById[6] = \"F_SHARP\"] = 6;\n                    values[\"G_FLAT\"] = 6;\n                    values[valuesById[7] = \"G\"] = 7;\n                    values[valuesById[8] = \"G_SHARP\"] = 8;\n                    values[\"A_FLAT\"] = 8;\n                    values[valuesById[9] = \"A\"] = 9;\n                    values[valuesById[10] = \"A_SHARP\"] = 10;\n                    values[\"B_FLAT\"] = 10;\n                    values[valuesById[11] = \"B\"] = 11;\n                    return values;\n                })();\n\n                /**\n                 * Mode enum.\n                 * @name tensorflow.magenta.NoteSequence.KeySignature.Mode\n                 * @enum {string}\n                 * @property {number} MAJOR=0 MAJOR value\n                 * @property {number} MINOR=1 MINOR value\n                 * @property {number} NOT_SPECIFIED=2 NOT_SPECIFIED value\n                 * @property {number} MIXOLYDIAN=3 MIXOLYDIAN value\n                 * @property {number} DORIAN=4 DORIAN value\n                 * @property {number} PHRYGIAN=5 PHRYGIAN value\n                 * @property {number} LYDIAN=6 LYDIAN value\n                 * @property {number} LOCRIAN=7 LOCRIAN value\n                 */\n                KeySignature.Mode = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"MAJOR\"] = 0;\n                    values[valuesById[1] = \"MINOR\"] = 1;\n                    values[valuesById[2] = \"NOT_SPECIFIED\"] = 2;\n                    values[valuesById[3] = \"MIXOLYDIAN\"] = 3;\n                    values[valuesById[4] = \"DORIAN\"] = 4;\n                    values[valuesById[5] = \"PHRYGIAN\"] = 5;\n                    values[valuesById[6] = \"LYDIAN\"] = 6;\n                    values[valuesById[7] = \"LOCRIAN\"] = 7;\n                    return values;\n                })();\n\n                return KeySignature;\n            })();\n\n            NoteSequence.Tempo = (function() {\n\n                /**\n                 * Properties of a Tempo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ITempo\n                 * @property {number|null} [time] Tempo time\n                 * @property {number|null} [qpm] Tempo qpm\n                 */\n\n                /**\n                 * Constructs a new Tempo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a Tempo.\n                 * @implements ITempo\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ITempo=} [properties] Properties to set\n                 */\n                function Tempo(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Tempo time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @instance\n                 */\n                Tempo.prototype.time = 0;\n\n                /**\n                 * Tempo qpm.\n                 * @member {number} qpm\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @instance\n                 */\n                Tempo.prototype.qpm = 0;\n\n                /**\n                 * Creates a new Tempo instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITempo=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.Tempo} Tempo instance\n                 */\n                Tempo.create = function create(properties) {\n                    return new Tempo(properties);\n                };\n\n                /**\n                 * Encodes the specified Tempo message. Does not implicitly {@link tensorflow.magenta.NoteSequence.Tempo.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITempo} message Tempo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Tempo.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.qpm != null && message.hasOwnProperty(\"qpm\"))\n                        writer.uint32(/* id 2, wireType 1 =*/17).double(message.qpm);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Tempo message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.Tempo.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITempo} message Tempo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Tempo.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Tempo message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.Tempo} Tempo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Tempo.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.Tempo();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 2:\n                            message.qpm = reader.double();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Tempo message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.Tempo} Tempo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Tempo.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Tempo message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Tempo.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.qpm != null && message.hasOwnProperty(\"qpm\"))\n                        if (typeof message.qpm !== \"number\")\n                            return \"qpm: number expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a Tempo message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.Tempo} Tempo\n                 */\n                Tempo.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.Tempo)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.Tempo();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    if (object.qpm != null)\n                        message.qpm = Number(object.qpm);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Tempo message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.Tempo} message Tempo\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Tempo.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        object.qpm = 0;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.qpm != null && message.hasOwnProperty(\"qpm\"))\n                        object.qpm = options.json && !isFinite(message.qpm) ? String(message.qpm) : message.qpm;\n                    return object;\n                };\n\n                /**\n                 * Converts this Tempo to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Tempo.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Tempo;\n            })();\n\n            NoteSequence.PitchBend = (function() {\n\n                /**\n                 * Properties of a PitchBend.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface IPitchBend\n                 * @property {number|null} [time] PitchBend time\n                 * @property {number|null} [bend] PitchBend bend\n                 * @property {number|null} [instrument] PitchBend instrument\n                 * @property {number|null} [program] PitchBend program\n                 * @property {boolean|null} [isDrum] PitchBend isDrum\n                 */\n\n                /**\n                 * Constructs a new PitchBend.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a PitchBend.\n                 * @implements IPitchBend\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.IPitchBend=} [properties] Properties to set\n                 */\n                function PitchBend(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * PitchBend time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @instance\n                 */\n                PitchBend.prototype.time = 0;\n\n                /**\n                 * PitchBend bend.\n                 * @member {number} bend\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @instance\n                 */\n                PitchBend.prototype.bend = 0;\n\n                /**\n                 * PitchBend instrument.\n                 * @member {number} instrument\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @instance\n                 */\n                PitchBend.prototype.instrument = 0;\n\n                /**\n                 * PitchBend program.\n                 * @member {number} program\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @instance\n                 */\n                PitchBend.prototype.program = 0;\n\n                /**\n                 * PitchBend isDrum.\n                 * @member {boolean} isDrum\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @instance\n                 */\n                PitchBend.prototype.isDrum = false;\n\n                /**\n                 * Creates a new PitchBend instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IPitchBend=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.PitchBend} PitchBend instance\n                 */\n                PitchBend.create = function create(properties) {\n                    return new PitchBend(properties);\n                };\n\n                /**\n                 * Encodes the specified PitchBend message. Does not implicitly {@link tensorflow.magenta.NoteSequence.PitchBend.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IPitchBend} message PitchBend message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PitchBend.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.bend != null && message.hasOwnProperty(\"bend\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.bend);\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.instrument);\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.program);\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isDrum);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified PitchBend message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.PitchBend.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IPitchBend} message PitchBend message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PitchBend.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a PitchBend message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.PitchBend} PitchBend\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PitchBend.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.PitchBend();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 2:\n                            message.bend = reader.int32();\n                            break;\n                        case 3:\n                            message.instrument = reader.int32();\n                            break;\n                        case 4:\n                            message.program = reader.int32();\n                            break;\n                        case 5:\n                            message.isDrum = reader.bool();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a PitchBend message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.PitchBend} PitchBend\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PitchBend.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a PitchBend message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                PitchBend.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.bend != null && message.hasOwnProperty(\"bend\"))\n                        if (!$util.isInteger(message.bend))\n                            return \"bend: integer expected\";\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        if (!$util.isInteger(message.instrument))\n                            return \"instrument: integer expected\";\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        if (!$util.isInteger(message.program))\n                            return \"program: integer expected\";\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        if (typeof message.isDrum !== \"boolean\")\n                            return \"isDrum: boolean expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a PitchBend message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.PitchBend} PitchBend\n                 */\n                PitchBend.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.PitchBend)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.PitchBend();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    if (object.bend != null)\n                        message.bend = object.bend | 0;\n                    if (object.instrument != null)\n                        message.instrument = object.instrument | 0;\n                    if (object.program != null)\n                        message.program = object.program | 0;\n                    if (object.isDrum != null)\n                        message.isDrum = Boolean(object.isDrum);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a PitchBend message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.PitchBend} message PitchBend\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                PitchBend.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        object.bend = 0;\n                        object.instrument = 0;\n                        object.program = 0;\n                        object.isDrum = false;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.bend != null && message.hasOwnProperty(\"bend\"))\n                        object.bend = message.bend;\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        object.instrument = message.instrument;\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        object.program = message.program;\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        object.isDrum = message.isDrum;\n                    return object;\n                };\n\n                /**\n                 * Converts this PitchBend to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                PitchBend.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return PitchBend;\n            })();\n\n            NoteSequence.ControlChange = (function() {\n\n                /**\n                 * Properties of a ControlChange.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface IControlChange\n                 * @property {number|null} [time] ControlChange time\n                 * @property {number|null} [quantizedStep] ControlChange quantizedStep\n                 * @property {number|null} [controlNumber] ControlChange controlNumber\n                 * @property {number|null} [controlValue] ControlChange controlValue\n                 * @property {number|null} [instrument] ControlChange instrument\n                 * @property {number|null} [program] ControlChange program\n                 * @property {boolean|null} [isDrum] ControlChange isDrum\n                 */\n\n                /**\n                 * Constructs a new ControlChange.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a ControlChange.\n                 * @implements IControlChange\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.IControlChange=} [properties] Properties to set\n                 */\n                function ControlChange(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * ControlChange time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.time = 0;\n\n                /**\n                 * ControlChange quantizedStep.\n                 * @member {number} quantizedStep\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.quantizedStep = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * ControlChange controlNumber.\n                 * @member {number} controlNumber\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.controlNumber = 0;\n\n                /**\n                 * ControlChange controlValue.\n                 * @member {number} controlValue\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.controlValue = 0;\n\n                /**\n                 * ControlChange instrument.\n                 * @member {number} instrument\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.instrument = 0;\n\n                /**\n                 * ControlChange program.\n                 * @member {number} program\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.program = 0;\n\n                /**\n                 * ControlChange isDrum.\n                 * @member {boolean} isDrum\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.isDrum = false;\n\n                /**\n                 * Creates a new ControlChange instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IControlChange=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.ControlChange} ControlChange instance\n                 */\n                ControlChange.create = function create(properties) {\n                    return new ControlChange(properties);\n                };\n\n                /**\n                 * Encodes the specified ControlChange message. Does not implicitly {@link tensorflow.magenta.NoteSequence.ControlChange.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IControlChange} message ControlChange message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ControlChange.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.controlNumber != null && message.hasOwnProperty(\"controlNumber\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.controlNumber);\n                    if (message.controlValue != null && message.hasOwnProperty(\"controlValue\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.controlValue);\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.instrument);\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.program);\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.isDrum);\n                    if (message.quantizedStep != null && message.hasOwnProperty(\"quantizedStep\"))\n                        writer.uint32(/* id 7, wireType 0 =*/56).int64(message.quantizedStep);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified ControlChange message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.ControlChange.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IControlChange} message ControlChange message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ControlChange.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a ControlChange message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.ControlChange} ControlChange\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ControlChange.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.ControlChange();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 7:\n                            message.quantizedStep = $util.Long?reader.int64().toNumber():reader.int64();\n                            break;\n                        case 2:\n                            message.controlNumber = reader.int32();\n                            break;\n                        case 3:\n                            message.controlValue = reader.int32();\n                            break;\n                        case 4:\n                            message.instrument = reader.int32();\n                            break;\n                        case 5:\n                            message.program = reader.int32();\n                            break;\n                        case 6:\n                            message.isDrum = reader.bool();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a ControlChange message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.ControlChange} ControlChange\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ControlChange.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a ControlChange message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                ControlChange.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.quantizedStep != null && message.hasOwnProperty(\"quantizedStep\"))\n                        if (!$util.isInteger(message.quantizedStep) && !(message.quantizedStep && $util.isInteger(message.quantizedStep.low) && $util.isInteger(message.quantizedStep.high)))\n                            return \"quantizedStep: integer|Long expected\";\n                    if (message.controlNumber != null && message.hasOwnProperty(\"controlNumber\"))\n                        if (!$util.isInteger(message.controlNumber))\n                            return \"controlNumber: integer expected\";\n                    if (message.controlValue != null && message.hasOwnProperty(\"controlValue\"))\n                        if (!$util.isInteger(message.controlValue))\n                            return \"controlValue: integer expected\";\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        if (!$util.isInteger(message.instrument))\n                            return \"instrument: integer expected\";\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        if (!$util.isInteger(message.program))\n                            return \"program: integer expected\";\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        if (typeof message.isDrum !== \"boolean\")\n                            return \"isDrum: boolean expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a ControlChange message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.ControlChange} ControlChange\n                 */\n                ControlChange.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.ControlChange)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.ControlChange();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    if (object.quantizedStep != null)\n                        if ($util.Long)\n                            (message.quantizedStep = $util.Long.fromValue(object.quantizedStep)).unsigned = false;\n                        else if (typeof object.quantizedStep === \"string\")\n                            message.quantizedStep = parseInt(object.quantizedStep, 10);\n                        else if (typeof object.quantizedStep === \"number\")\n                            message.quantizedStep = object.quantizedStep;\n                        else if (typeof object.quantizedStep === \"object\")\n                            message.quantizedStep = new $util.LongBits(object.quantizedStep.low >>> 0, object.quantizedStep.high >>> 0).toNumber();\n                    if (object.controlNumber != null)\n                        message.controlNumber = object.controlNumber | 0;\n                    if (object.controlValue != null)\n                        message.controlValue = object.controlValue | 0;\n                    if (object.instrument != null)\n                        message.instrument = object.instrument | 0;\n                    if (object.program != null)\n                        message.program = object.program | 0;\n                    if (object.isDrum != null)\n                        message.isDrum = Boolean(object.isDrum);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a ControlChange message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ControlChange} message ControlChange\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                ControlChange.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        object.controlNumber = 0;\n                        object.controlValue = 0;\n                        object.instrument = 0;\n                        object.program = 0;\n                        object.isDrum = false;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.quantizedStep = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.quantizedStep = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.controlNumber != null && message.hasOwnProperty(\"controlNumber\"))\n                        object.controlNumber = message.controlNumber;\n                    if (message.controlValue != null && message.hasOwnProperty(\"controlValue\"))\n                        object.controlValue = message.controlValue;\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        object.instrument = message.instrument;\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        object.program = message.program;\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        object.isDrum = message.isDrum;\n                    if (message.quantizedStep != null && message.hasOwnProperty(\"quantizedStep\"))\n                        if (typeof message.quantizedStep === \"number\")\n                            object.quantizedStep = options.longs === String ? String(message.quantizedStep) : message.quantizedStep;\n                        else\n                            object.quantizedStep = options.longs === String ? $util.Long.prototype.toString.call(message.quantizedStep) : options.longs === Number ? new $util.LongBits(message.quantizedStep.low >>> 0, message.quantizedStep.high >>> 0).toNumber() : message.quantizedStep;\n                    return object;\n                };\n\n                /**\n                 * Converts this ControlChange to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                ControlChange.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return ControlChange;\n            })();\n\n            NoteSequence.PartInfo = (function() {\n\n                /**\n                 * Properties of a PartInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface IPartInfo\n                 * @property {number|null} [part] PartInfo part\n                 * @property {string|null} [name] PartInfo name\n                 */\n\n                /**\n                 * Constructs a new PartInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a PartInfo.\n                 * @implements IPartInfo\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.IPartInfo=} [properties] Properties to set\n                 */\n                function PartInfo(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * PartInfo part.\n                 * @member {number} part\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @instance\n                 */\n                PartInfo.prototype.part = 0;\n\n                /**\n                 * PartInfo name.\n                 * @member {string} name\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @instance\n                 */\n                PartInfo.prototype.name = \"\";\n\n                /**\n                 * Creates a new PartInfo instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IPartInfo=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.PartInfo} PartInfo instance\n                 */\n                PartInfo.create = function create(properties) {\n                    return new PartInfo(properties);\n                };\n\n                /**\n                 * Encodes the specified PartInfo message. Does not implicitly {@link tensorflow.magenta.NoteSequence.PartInfo.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IPartInfo} message PartInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PartInfo.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.part != null && message.hasOwnProperty(\"part\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.part);\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified PartInfo message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.PartInfo.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IPartInfo} message PartInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PartInfo.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a PartInfo message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.PartInfo} PartInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PartInfo.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.PartInfo();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.part = reader.int32();\n                            break;\n                        case 2:\n                            message.name = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a PartInfo message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.PartInfo} PartInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PartInfo.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a PartInfo message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                PartInfo.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.part != null && message.hasOwnProperty(\"part\"))\n                        if (!$util.isInteger(message.part))\n                            return \"part: integer expected\";\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        if (!$util.isString(message.name))\n                            return \"name: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a PartInfo message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.PartInfo} PartInfo\n                 */\n                PartInfo.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.PartInfo)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.PartInfo();\n                    if (object.part != null)\n                        message.part = object.part | 0;\n                    if (object.name != null)\n                        message.name = String(object.name);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a PartInfo message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.PartInfo} message PartInfo\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                PartInfo.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.part = 0;\n                        object.name = \"\";\n                    }\n                    if (message.part != null && message.hasOwnProperty(\"part\"))\n                        object.part = message.part;\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        object.name = message.name;\n                    return object;\n                };\n\n                /**\n                 * Converts this PartInfo to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                PartInfo.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return PartInfo;\n            })();\n\n            NoteSequence.SourceInfo = (function() {\n\n                /**\n                 * Properties of a SourceInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ISourceInfo\n                 * @property {tensorflow.magenta.NoteSequence.SourceInfo.SourceType|null} [sourceType] SourceInfo sourceType\n                 * @property {tensorflow.magenta.NoteSequence.SourceInfo.EncodingType|null} [encodingType] SourceInfo encodingType\n                 * @property {tensorflow.magenta.NoteSequence.SourceInfo.Parser|null} [parser] SourceInfo parser\n                 */\n\n                /**\n                 * Constructs a new SourceInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a SourceInfo.\n                 * @implements ISourceInfo\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ISourceInfo=} [properties] Properties to set\n                 */\n                function SourceInfo(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SourceInfo sourceType.\n                 * @member {tensorflow.magenta.NoteSequence.SourceInfo.SourceType} sourceType\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @instance\n                 */\n                SourceInfo.prototype.sourceType = 0;\n\n                /**\n                 * SourceInfo encodingType.\n                 * @member {tensorflow.magenta.NoteSequence.SourceInfo.EncodingType} encodingType\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @instance\n                 */\n                SourceInfo.prototype.encodingType = 0;\n\n                /**\n                 * SourceInfo parser.\n                 * @member {tensorflow.magenta.NoteSequence.SourceInfo.Parser} parser\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @instance\n                 */\n                SourceInfo.prototype.parser = 0;\n\n                /**\n                 * Creates a new SourceInfo instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISourceInfo=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.SourceInfo} SourceInfo instance\n                 */\n                SourceInfo.create = function create(properties) {\n                    return new SourceInfo(properties);\n                };\n\n                /**\n                 * Encodes the specified SourceInfo message. Does not implicitly {@link tensorflow.magenta.NoteSequence.SourceInfo.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISourceInfo} message SourceInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SourceInfo.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.sourceType != null && message.hasOwnProperty(\"sourceType\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.sourceType);\n                    if (message.encodingType != null && message.hasOwnProperty(\"encodingType\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.encodingType);\n                    if (message.parser != null && message.hasOwnProperty(\"parser\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.parser);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SourceInfo message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.SourceInfo.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISourceInfo} message SourceInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SourceInfo.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SourceInfo message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.SourceInfo} SourceInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SourceInfo.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.SourceInfo();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.sourceType = reader.int32();\n                            break;\n                        case 2:\n                            message.encodingType = reader.int32();\n                            break;\n                        case 3:\n                            message.parser = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SourceInfo message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.SourceInfo} SourceInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SourceInfo.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SourceInfo message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SourceInfo.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.sourceType != null && message.hasOwnProperty(\"sourceType\"))\n                        switch (message.sourceType) {\n                        default:\n                            return \"sourceType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.encodingType != null && message.hasOwnProperty(\"encodingType\"))\n                        switch (message.encodingType) {\n                        default:\n                            return \"encodingType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                            break;\n                        }\n                    if (message.parser != null && message.hasOwnProperty(\"parser\"))\n                        switch (message.parser) {\n                        default:\n                            return \"parser: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                            break;\n                        }\n                    return null;\n                };\n\n                /**\n                 * Creates a SourceInfo message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.SourceInfo} SourceInfo\n                 */\n                SourceInfo.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.SourceInfo)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.SourceInfo();\n                    switch (object.sourceType) {\n                    case \"UNKNOWN_SOURCE_TYPE\":\n                    case 0:\n                        message.sourceType = 0;\n                        break;\n                    case \"SCORE_BASED\":\n                    case 1:\n                        message.sourceType = 1;\n                        break;\n                    case \"PERFORMANCE_BASED\":\n                    case 2:\n                        message.sourceType = 2;\n                        break;\n                    }\n                    switch (object.encodingType) {\n                    case \"UNKNOWN_ENCODING_TYPE\":\n                    case 0:\n                        message.encodingType = 0;\n                        break;\n                    case \"MUSIC_XML\":\n                    case 1:\n                        message.encodingType = 1;\n                        break;\n                    case \"ABC\":\n                    case 2:\n                        message.encodingType = 2;\n                        break;\n                    case \"MIDI\":\n                    case 3:\n                        message.encodingType = 3;\n                        break;\n                    case \"MUSICNET\":\n                    case 4:\n                        message.encodingType = 4;\n                        break;\n                    }\n                    switch (object.parser) {\n                    case \"UNKNOWN_PARSER\":\n                    case 0:\n                        message.parser = 0;\n                        break;\n                    case \"MUSIC21\":\n                    case 1:\n                        message.parser = 1;\n                        break;\n                    case \"PRETTY_MIDI\":\n                    case 2:\n                        message.parser = 2;\n                        break;\n                    case \"MAGENTA_MUSIC_XML\":\n                    case 3:\n                        message.parser = 3;\n                        break;\n                    case \"MAGENTA_MUSICNET\":\n                    case 4:\n                        message.parser = 4;\n                        break;\n                    case \"MAGENTA_ABC\":\n                    case 5:\n                        message.parser = 5;\n                        break;\n                    case \"TONEJS_MIDI_CONVERT\":\n                    case 6:\n                        message.parser = 6;\n                        break;\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SourceInfo message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.SourceInfo} message SourceInfo\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SourceInfo.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.sourceType = options.enums === String ? \"UNKNOWN_SOURCE_TYPE\" : 0;\n                        object.encodingType = options.enums === String ? \"UNKNOWN_ENCODING_TYPE\" : 0;\n                        object.parser = options.enums === String ? \"UNKNOWN_PARSER\" : 0;\n                    }\n                    if (message.sourceType != null && message.hasOwnProperty(\"sourceType\"))\n                        object.sourceType = options.enums === String ? $root.tensorflow.magenta.NoteSequence.SourceInfo.SourceType[message.sourceType] : message.sourceType;\n                    if (message.encodingType != null && message.hasOwnProperty(\"encodingType\"))\n                        object.encodingType = options.enums === String ? $root.tensorflow.magenta.NoteSequence.SourceInfo.EncodingType[message.encodingType] : message.encodingType;\n                    if (message.parser != null && message.hasOwnProperty(\"parser\"))\n                        object.parser = options.enums === String ? $root.tensorflow.magenta.NoteSequence.SourceInfo.Parser[message.parser] : message.parser;\n                    return object;\n                };\n\n                /**\n                 * Converts this SourceInfo to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SourceInfo.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                /**\n                 * SourceType enum.\n                 * @name tensorflow.magenta.NoteSequence.SourceInfo.SourceType\n                 * @enum {string}\n                 * @property {number} UNKNOWN_SOURCE_TYPE=0 UNKNOWN_SOURCE_TYPE value\n                 * @property {number} SCORE_BASED=1 SCORE_BASED value\n                 * @property {number} PERFORMANCE_BASED=2 PERFORMANCE_BASED value\n                 */\n                SourceInfo.SourceType = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"UNKNOWN_SOURCE_TYPE\"] = 0;\n                    values[valuesById[1] = \"SCORE_BASED\"] = 1;\n                    values[valuesById[2] = \"PERFORMANCE_BASED\"] = 2;\n                    return values;\n                })();\n\n                /**\n                 * EncodingType enum.\n                 * @name tensorflow.magenta.NoteSequence.SourceInfo.EncodingType\n                 * @enum {string}\n                 * @property {number} UNKNOWN_ENCODING_TYPE=0 UNKNOWN_ENCODING_TYPE value\n                 * @property {number} MUSIC_XML=1 MUSIC_XML value\n                 * @property {number} ABC=2 ABC value\n                 * @property {number} MIDI=3 MIDI value\n                 * @property {number} MUSICNET=4 MUSICNET value\n                 */\n                SourceInfo.EncodingType = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"UNKNOWN_ENCODING_TYPE\"] = 0;\n                    values[valuesById[1] = \"MUSIC_XML\"] = 1;\n                    values[valuesById[2] = \"ABC\"] = 2;\n                    values[valuesById[3] = \"MIDI\"] = 3;\n                    values[valuesById[4] = \"MUSICNET\"] = 4;\n                    return values;\n                })();\n\n                /**\n                 * Parser enum.\n                 * @name tensorflow.magenta.NoteSequence.SourceInfo.Parser\n                 * @enum {string}\n                 * @property {number} UNKNOWN_PARSER=0 UNKNOWN_PARSER value\n                 * @property {number} MUSIC21=1 MUSIC21 value\n                 * @property {number} PRETTY_MIDI=2 PRETTY_MIDI value\n                 * @property {number} MAGENTA_MUSIC_XML=3 MAGENTA_MUSIC_XML value\n                 * @property {number} MAGENTA_MUSICNET=4 MAGENTA_MUSICNET value\n                 * @property {number} MAGENTA_ABC=5 MAGENTA_ABC value\n                 * @property {number} TONEJS_MIDI_CONVERT=6 TONEJS_MIDI_CONVERT value\n                 */\n                SourceInfo.Parser = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"UNKNOWN_PARSER\"] = 0;\n                    values[valuesById[1] = \"MUSIC21\"] = 1;\n                    values[valuesById[2] = \"PRETTY_MIDI\"] = 2;\n                    values[valuesById[3] = \"MAGENTA_MUSIC_XML\"] = 3;\n                    values[valuesById[4] = \"MAGENTA_MUSICNET\"] = 4;\n                    values[valuesById[5] = \"MAGENTA_ABC\"] = 5;\n                    values[valuesById[6] = \"TONEJS_MIDI_CONVERT\"] = 6;\n                    return values;\n                })();\n\n                return SourceInfo;\n            })();\n\n            NoteSequence.TextAnnotation = (function() {\n\n                /**\n                 * Properties of a TextAnnotation.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ITextAnnotation\n                 * @property {number|null} [time] TextAnnotation time\n                 * @property {number|null} [quantizedStep] TextAnnotation quantizedStep\n                 * @property {string|null} [text] TextAnnotation text\n                 * @property {tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType|null} [annotationType] TextAnnotation annotationType\n                 */\n\n                /**\n                 * Constructs a new TextAnnotation.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a TextAnnotation.\n                 * @implements ITextAnnotation\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ITextAnnotation=} [properties] Properties to set\n                 */\n                function TextAnnotation(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TextAnnotation time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @instance\n                 */\n                TextAnnotation.prototype.time = 0;\n\n                /**\n                 * TextAnnotation quantizedStep.\n                 * @member {number} quantizedStep\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @instance\n                 */\n                TextAnnotation.prototype.quantizedStep = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * TextAnnotation text.\n                 * @member {string} text\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @instance\n                 */\n                TextAnnotation.prototype.text = \"\";\n\n                /**\n                 * TextAnnotation annotationType.\n                 * @member {tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType} annotationType\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @instance\n                 */\n                TextAnnotation.prototype.annotationType = 0;\n\n                /**\n                 * Creates a new TextAnnotation instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITextAnnotation=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.TextAnnotation} TextAnnotation instance\n                 */\n                TextAnnotation.create = function create(properties) {\n                    return new TextAnnotation(properties);\n                };\n\n                /**\n                 * Encodes the specified TextAnnotation message. Does not implicitly {@link tensorflow.magenta.NoteSequence.TextAnnotation.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITextAnnotation} message TextAnnotation message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TextAnnotation.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.text != null && message.hasOwnProperty(\"text\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);\n                    if (message.annotationType != null && message.hasOwnProperty(\"annotationType\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.annotationType);\n                    if (message.quantizedStep != null && message.hasOwnProperty(\"quantizedStep\"))\n                        writer.uint32(/* id 4, wireType 0 =*/32).int64(message.quantizedStep);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TextAnnotation message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.TextAnnotation.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITextAnnotation} message TextAnnotation message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TextAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TextAnnotation message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.TextAnnotation} TextAnnotation\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TextAnnotation.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.TextAnnotation();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 4:\n                            message.quantizedStep = $util.Long?reader.int64().toNumber():reader.int64();\n                            break;\n                        case 2:\n                            message.text = reader.string();\n                            break;\n                        case 3:\n                            message.annotationType = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TextAnnotation message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.TextAnnotation} TextAnnotation\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TextAnnotation.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TextAnnotation message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TextAnnotation.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.quantizedStep != null && message.hasOwnProperty(\"quantizedStep\"))\n                        if (!$util.isInteger(message.quantizedStep) && !(message.quantizedStep && $util.isInteger(message.quantizedStep.low) && $util.isInteger(message.quantizedStep.high)))\n                            return \"quantizedStep: integer|Long expected\";\n                    if (message.text != null && message.hasOwnProperty(\"text\"))\n                        if (!$util.isString(message.text))\n                            return \"text: string expected\";\n                    if (message.annotationType != null && message.hasOwnProperty(\"annotationType\"))\n                        switch (message.annotationType) {\n                        default:\n                            return \"annotationType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    return null;\n                };\n\n                /**\n                 * Creates a TextAnnotation message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.TextAnnotation} TextAnnotation\n                 */\n                TextAnnotation.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.TextAnnotation)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.TextAnnotation();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    if (object.quantizedStep != null)\n                        if ($util.Long)\n                            (message.quantizedStep = $util.Long.fromValue(object.quantizedStep)).unsigned = false;\n                        else if (typeof object.quantizedStep === \"string\")\n                            message.quantizedStep = parseInt(object.quantizedStep, 10);\n                        else if (typeof object.quantizedStep === \"number\")\n                            message.quantizedStep = object.quantizedStep;\n                        else if (typeof object.quantizedStep === \"object\")\n                            message.quantizedStep = new $util.LongBits(object.quantizedStep.low >>> 0, object.quantizedStep.high >>> 0).toNumber();\n                    if (object.text != null)\n                        message.text = String(object.text);\n                    switch (object.annotationType) {\n                    case \"UNKNOWN\":\n                    case 0:\n                        message.annotationType = 0;\n                        break;\n                    case \"CHORD_SYMBOL\":\n                    case 1:\n                        message.annotationType = 1;\n                        break;\n                    case \"BEAT\":\n                    case 2:\n                        message.annotationType = 2;\n                        break;\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TextAnnotation message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.TextAnnotation} message TextAnnotation\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TextAnnotation.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        object.text = \"\";\n                        object.annotationType = options.enums === String ? \"UNKNOWN\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.quantizedStep = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.quantizedStep = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.text != null && message.hasOwnProperty(\"text\"))\n                        object.text = message.text;\n                    if (message.annotationType != null && message.hasOwnProperty(\"annotationType\"))\n                        object.annotationType = options.enums === String ? $root.tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType[message.annotationType] : message.annotationType;\n                    if (message.quantizedStep != null && message.hasOwnProperty(\"quantizedStep\"))\n                        if (typeof message.quantizedStep === \"number\")\n                            object.quantizedStep = options.longs === String ? String(message.quantizedStep) : message.quantizedStep;\n                        else\n                            object.quantizedStep = options.longs === String ? $util.Long.prototype.toString.call(message.quantizedStep) : options.longs === Number ? new $util.LongBits(message.quantizedStep.low >>> 0, message.quantizedStep.high >>> 0).toNumber() : message.quantizedStep;\n                    return object;\n                };\n\n                /**\n                 * Converts this TextAnnotation to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TextAnnotation.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                /**\n                 * TextAnnotationType enum.\n                 * @name tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType\n                 * @enum {string}\n                 * @property {number} UNKNOWN=0 UNKNOWN value\n                 * @property {number} CHORD_SYMBOL=1 CHORD_SYMBOL value\n                 * @property {number} BEAT=2 BEAT value\n                 */\n                TextAnnotation.TextAnnotationType = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"UNKNOWN\"] = 0;\n                    values[valuesById[1] = \"CHORD_SYMBOL\"] = 1;\n                    values[valuesById[2] = \"BEAT\"] = 2;\n                    return values;\n                })();\n\n                return TextAnnotation;\n            })();\n\n            NoteSequence.QuantizationInfo = (function() {\n\n                /**\n                 * Properties of a QuantizationInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface IQuantizationInfo\n                 * @property {number|null} [stepsPerQuarter] QuantizationInfo stepsPerQuarter\n                 * @property {number|null} [stepsPerSecond] QuantizationInfo stepsPerSecond\n                 */\n\n                /**\n                 * Constructs a new QuantizationInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a QuantizationInfo.\n                 * @implements IQuantizationInfo\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.IQuantizationInfo=} [properties] Properties to set\n                 */\n                function QuantizationInfo(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * QuantizationInfo stepsPerQuarter.\n                 * @member {number} stepsPerQuarter\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @instance\n                 */\n                QuantizationInfo.prototype.stepsPerQuarter = 0;\n\n                /**\n                 * QuantizationInfo stepsPerSecond.\n                 * @member {number} stepsPerSecond\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @instance\n                 */\n                QuantizationInfo.prototype.stepsPerSecond = 0;\n\n                // OneOf field names bound to virtual getters and setters\n                var $oneOfFields;\n\n                /**\n                 * QuantizationInfo resolution.\n                 * @member {\"stepsPerQuarter\"|\"stepsPerSecond\"|undefined} resolution\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @instance\n                 */\n                Object.defineProperty(QuantizationInfo.prototype, \"resolution\", {\n                    get: $util.oneOfGetter($oneOfFields = [\"stepsPerQuarter\", \"stepsPerSecond\"]),\n                    set: $util.oneOfSetter($oneOfFields)\n                });\n\n                /**\n                 * Creates a new QuantizationInfo instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IQuantizationInfo=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.QuantizationInfo} QuantizationInfo instance\n                 */\n                QuantizationInfo.create = function create(properties) {\n                    return new QuantizationInfo(properties);\n                };\n\n                /**\n                 * Encodes the specified QuantizationInfo message. Does not implicitly {@link tensorflow.magenta.NoteSequence.QuantizationInfo.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IQuantizationInfo} message QuantizationInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                QuantizationInfo.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.stepsPerQuarter != null && message.hasOwnProperty(\"stepsPerQuarter\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.stepsPerQuarter);\n                    if (message.stepsPerSecond != null && message.hasOwnProperty(\"stepsPerSecond\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.stepsPerSecond);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified QuantizationInfo message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.QuantizationInfo.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IQuantizationInfo} message QuantizationInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                QuantizationInfo.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a QuantizationInfo message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.QuantizationInfo} QuantizationInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                QuantizationInfo.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.QuantizationInfo();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.stepsPerQuarter = reader.int32();\n                            break;\n                        case 2:\n                            message.stepsPerSecond = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a QuantizationInfo message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.QuantizationInfo} QuantizationInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                QuantizationInfo.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a QuantizationInfo message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                QuantizationInfo.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    var properties = {};\n                    if (message.stepsPerQuarter != null && message.hasOwnProperty(\"stepsPerQuarter\")) {\n                        properties.resolution = 1;\n                        if (!$util.isInteger(message.stepsPerQuarter))\n                            return \"stepsPerQuarter: integer expected\";\n                    }\n                    if (message.stepsPerSecond != null && message.hasOwnProperty(\"stepsPerSecond\")) {\n                        if (properties.resolution === 1)\n                            return \"resolution: multiple values\";\n                        properties.resolution = 1;\n                        if (!$util.isInteger(message.stepsPerSecond))\n                            return \"stepsPerSecond: integer expected\";\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a QuantizationInfo message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.QuantizationInfo} QuantizationInfo\n                 */\n                QuantizationInfo.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.QuantizationInfo)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.QuantizationInfo();\n                    if (object.stepsPerQuarter != null)\n                        message.stepsPerQuarter = object.stepsPerQuarter | 0;\n                    if (object.stepsPerSecond != null)\n                        message.stepsPerSecond = object.stepsPerSecond | 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a QuantizationInfo message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.QuantizationInfo} message QuantizationInfo\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                QuantizationInfo.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (message.stepsPerQuarter != null && message.hasOwnProperty(\"stepsPerQuarter\")) {\n                        object.stepsPerQuarter = message.stepsPerQuarter;\n                        if (options.oneofs)\n                            object.resolution = \"stepsPerQuarter\";\n                    }\n                    if (message.stepsPerSecond != null && message.hasOwnProperty(\"stepsPerSecond\")) {\n                        object.stepsPerSecond = message.stepsPerSecond;\n                        if (options.oneofs)\n                            object.resolution = \"stepsPerSecond\";\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this QuantizationInfo to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                QuantizationInfo.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return QuantizationInfo;\n            })();\n\n            NoteSequence.SubsequenceInfo = (function() {\n\n                /**\n                 * Properties of a SubsequenceInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ISubsequenceInfo\n                 * @property {number|null} [startTimeOffset] SubsequenceInfo startTimeOffset\n                 * @property {number|null} [endTimeOffset] SubsequenceInfo endTimeOffset\n                 */\n\n                /**\n                 * Constructs a new SubsequenceInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a SubsequenceInfo.\n                 * @implements ISubsequenceInfo\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ISubsequenceInfo=} [properties] Properties to set\n                 */\n                function SubsequenceInfo(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SubsequenceInfo startTimeOffset.\n                 * @member {number} startTimeOffset\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @instance\n                 */\n                SubsequenceInfo.prototype.startTimeOffset = 0;\n\n                /**\n                 * SubsequenceInfo endTimeOffset.\n                 * @member {number} endTimeOffset\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @instance\n                 */\n                SubsequenceInfo.prototype.endTimeOffset = 0;\n\n                /**\n                 * Creates a new SubsequenceInfo instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISubsequenceInfo=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.SubsequenceInfo} SubsequenceInfo instance\n                 */\n                SubsequenceInfo.create = function create(properties) {\n                    return new SubsequenceInfo(properties);\n                };\n\n                /**\n                 * Encodes the specified SubsequenceInfo message. Does not implicitly {@link tensorflow.magenta.NoteSequence.SubsequenceInfo.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISubsequenceInfo} message SubsequenceInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SubsequenceInfo.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.startTimeOffset != null && message.hasOwnProperty(\"startTimeOffset\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.startTimeOffset);\n                    if (message.endTimeOffset != null && message.hasOwnProperty(\"endTimeOffset\"))\n                        writer.uint32(/* id 2, wireType 1 =*/17).double(message.endTimeOffset);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SubsequenceInfo message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.SubsequenceInfo.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISubsequenceInfo} message SubsequenceInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SubsequenceInfo.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SubsequenceInfo message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.SubsequenceInfo} SubsequenceInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SubsequenceInfo.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.SubsequenceInfo();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.startTimeOffset = reader.double();\n                            break;\n                        case 2:\n                            message.endTimeOffset = reader.double();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SubsequenceInfo message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.SubsequenceInfo} SubsequenceInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SubsequenceInfo.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SubsequenceInfo message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SubsequenceInfo.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.startTimeOffset != null && message.hasOwnProperty(\"startTimeOffset\"))\n                        if (typeof message.startTimeOffset !== \"number\")\n                            return \"startTimeOffset: number expected\";\n                    if (message.endTimeOffset != null && message.hasOwnProperty(\"endTimeOffset\"))\n                        if (typeof message.endTimeOffset !== \"number\")\n                            return \"endTimeOffset: number expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a SubsequenceInfo message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.SubsequenceInfo} SubsequenceInfo\n                 */\n                SubsequenceInfo.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.SubsequenceInfo)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.SubsequenceInfo();\n                    if (object.startTimeOffset != null)\n                        message.startTimeOffset = Number(object.startTimeOffset);\n                    if (object.endTimeOffset != null)\n                        message.endTimeOffset = Number(object.endTimeOffset);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SubsequenceInfo message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.SubsequenceInfo} message SubsequenceInfo\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SubsequenceInfo.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.startTimeOffset = 0;\n                        object.endTimeOffset = 0;\n                    }\n                    if (message.startTimeOffset != null && message.hasOwnProperty(\"startTimeOffset\"))\n                        object.startTimeOffset = options.json && !isFinite(message.startTimeOffset) ? String(message.startTimeOffset) : message.startTimeOffset;\n                    if (message.endTimeOffset != null && message.hasOwnProperty(\"endTimeOffset\"))\n                        object.endTimeOffset = options.json && !isFinite(message.endTimeOffset) ? String(message.endTimeOffset) : message.endTimeOffset;\n                    return object;\n                };\n\n                /**\n                 * Converts this SubsequenceInfo to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SubsequenceInfo.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return SubsequenceInfo;\n            })();\n\n            NoteSequence.SectionAnnotation = (function() {\n\n                /**\n                 * Properties of a SectionAnnotation.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ISectionAnnotation\n                 * @property {number|null} [time] SectionAnnotation time\n                 * @property {number|null} [sectionId] SectionAnnotation sectionId\n                 */\n\n                /**\n                 * Constructs a new SectionAnnotation.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a SectionAnnotation.\n                 * @implements ISectionAnnotation\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ISectionAnnotation=} [properties] Properties to set\n                 */\n                function SectionAnnotation(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SectionAnnotation time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @instance\n                 */\n                SectionAnnotation.prototype.time = 0;\n\n                /**\n                 * SectionAnnotation sectionId.\n                 * @member {number} sectionId\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @instance\n                 */\n                SectionAnnotation.prototype.sectionId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Creates a new SectionAnnotation instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISectionAnnotation=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.SectionAnnotation} SectionAnnotation instance\n                 */\n                SectionAnnotation.create = function create(properties) {\n                    return new SectionAnnotation(properties);\n                };\n\n                /**\n                 * Encodes the specified SectionAnnotation message. Does not implicitly {@link tensorflow.magenta.NoteSequence.SectionAnnotation.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISectionAnnotation} message SectionAnnotation message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SectionAnnotation.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.sectionId != null && message.hasOwnProperty(\"sectionId\"))\n                        writer.uint32(/* id 4, wireType 0 =*/32).int64(message.sectionId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SectionAnnotation message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.SectionAnnotation.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISectionAnnotation} message SectionAnnotation message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SectionAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SectionAnnotation message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.SectionAnnotation} SectionAnnotation\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SectionAnnotation.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.SectionAnnotation();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 4:\n                            message.sectionId = $util.Long?reader.int64().toNumber():reader.int64();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SectionAnnotation message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.SectionAnnotation} SectionAnnotation\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SectionAnnotation.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SectionAnnotation message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SectionAnnotation.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.sectionId != null && message.hasOwnProperty(\"sectionId\"))\n                        if (!$util.isInteger(message.sectionId) && !(message.sectionId && $util.isInteger(message.sectionId.low) && $util.isInteger(message.sectionId.high)))\n                            return \"sectionId: integer|Long expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a SectionAnnotation message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.SectionAnnotation} SectionAnnotation\n                 */\n                SectionAnnotation.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.SectionAnnotation)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.SectionAnnotation();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    if (object.sectionId != null)\n                        if ($util.Long)\n                            (message.sectionId = $util.Long.fromValue(object.sectionId)).unsigned = false;\n                        else if (typeof object.sectionId === \"string\")\n                            message.sectionId = parseInt(object.sectionId, 10);\n                        else if (typeof object.sectionId === \"number\")\n                            message.sectionId = object.sectionId;\n                        else if (typeof object.sectionId === \"object\")\n                            message.sectionId = new $util.LongBits(object.sectionId.low >>> 0, object.sectionId.high >>> 0).toNumber();\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SectionAnnotation message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.SectionAnnotation} message SectionAnnotation\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SectionAnnotation.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.sectionId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.sectionId = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.sectionId != null && message.hasOwnProperty(\"sectionId\"))\n                        if (typeof message.sectionId === \"number\")\n                            object.sectionId = options.longs === String ? String(message.sectionId) : message.sectionId;\n                        else\n                            object.sectionId = options.longs === String ? $util.Long.prototype.toString.call(message.sectionId) : options.longs === Number ? new $util.LongBits(message.sectionId.low >>> 0, message.sectionId.high >>> 0).toNumber() : message.sectionId;\n                    return object;\n                };\n\n                /**\n                 * Converts this SectionAnnotation to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SectionAnnotation.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return SectionAnnotation;\n            })();\n\n            NoteSequence.Section = (function() {\n\n                /**\n                 * Properties of a Section.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ISection\n                 * @property {number|null} [sectionId] Section sectionId\n                 * @property {tensorflow.magenta.NoteSequence.ISectionGroup|null} [sectionGroup] Section sectionGroup\n                 */\n\n                /**\n                 * Constructs a new Section.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a Section.\n                 * @implements ISection\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ISection=} [properties] Properties to set\n                 */\n                function Section(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Section sectionId.\n                 * @member {number} sectionId\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @instance\n                 */\n                Section.prototype.sectionId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Section sectionGroup.\n                 * @member {tensorflow.magenta.NoteSequence.ISectionGroup|null|undefined} sectionGroup\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @instance\n                 */\n                Section.prototype.sectionGroup = null;\n\n                // OneOf field names bound to virtual getters and setters\n                var $oneOfFields;\n\n                /**\n                 * Section sectionType.\n                 * @member {\"sectionId\"|\"sectionGroup\"|undefined} sectionType\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @instance\n                 */\n                Object.defineProperty(Section.prototype, \"sectionType\", {\n                    get: $util.oneOfGetter($oneOfFields = [\"sectionId\", \"sectionGroup\"]),\n                    set: $util.oneOfSetter($oneOfFields)\n                });\n\n                /**\n                 * Creates a new Section instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISection=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.Section} Section instance\n                 */\n                Section.create = function create(properties) {\n                    return new Section(properties);\n                };\n\n                /**\n                 * Encodes the specified Section message. Does not implicitly {@link tensorflow.magenta.NoteSequence.Section.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISection} message Section message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Section.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.sectionId != null && message.hasOwnProperty(\"sectionId\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.sectionId);\n                    if (message.sectionGroup != null && message.hasOwnProperty(\"sectionGroup\"))\n                        $root.tensorflow.magenta.NoteSequence.SectionGroup.encode(message.sectionGroup, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Section message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.Section.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISection} message Section message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Section.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Section message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.Section} Section\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Section.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.Section();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.sectionId = $util.Long?reader.int64().toNumber():reader.int64();\n                            break;\n                        case 2:\n                            message.sectionGroup = $root.tensorflow.magenta.NoteSequence.SectionGroup.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Section message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.Section} Section\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Section.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Section message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Section.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    var properties = {};\n                    if (message.sectionId != null && message.hasOwnProperty(\"sectionId\")) {\n                        properties.sectionType = 1;\n                        if (!$util.isInteger(message.sectionId) && !(message.sectionId && $util.isInteger(message.sectionId.low) && $util.isInteger(message.sectionId.high)))\n                            return \"sectionId: integer|Long expected\";\n                    }\n                    if (message.sectionGroup != null && message.hasOwnProperty(\"sectionGroup\")) {\n                        if (properties.sectionType === 1)\n                            return \"sectionType: multiple values\";\n                        properties.sectionType = 1;\n                        {\n                            var error = $root.tensorflow.magenta.NoteSequence.SectionGroup.verify(message.sectionGroup);\n                            if (error)\n                                return \"sectionGroup.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a Section message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.Section} Section\n                 */\n                Section.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.Section)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.Section();\n                    if (object.sectionId != null)\n                        if ($util.Long)\n                            (message.sectionId = $util.Long.fromValue(object.sectionId)).unsigned = false;\n                        else if (typeof object.sectionId === \"string\")\n                            message.sectionId = parseInt(object.sectionId, 10);\n                        else if (typeof object.sectionId === \"number\")\n                            message.sectionId = object.sectionId;\n                        else if (typeof object.sectionId === \"object\")\n                            message.sectionId = new $util.LongBits(object.sectionId.low >>> 0, object.sectionId.high >>> 0).toNumber();\n                    if (object.sectionGroup != null) {\n                        if (typeof object.sectionGroup !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.Section.sectionGroup: object expected\");\n                        message.sectionGroup = $root.tensorflow.magenta.NoteSequence.SectionGroup.fromObject(object.sectionGroup);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Section message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.Section} message Section\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Section.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (message.sectionId != null && message.hasOwnProperty(\"sectionId\")) {\n                        if (typeof message.sectionId === \"number\")\n                            object.sectionId = options.longs === String ? String(message.sectionId) : message.sectionId;\n                        else\n                            object.sectionId = options.longs === String ? $util.Long.prototype.toString.call(message.sectionId) : options.longs === Number ? new $util.LongBits(message.sectionId.low >>> 0, message.sectionId.high >>> 0).toNumber() : message.sectionId;\n                        if (options.oneofs)\n                            object.sectionType = \"sectionId\";\n                    }\n                    if (message.sectionGroup != null && message.hasOwnProperty(\"sectionGroup\")) {\n                        object.sectionGroup = $root.tensorflow.magenta.NoteSequence.SectionGroup.toObject(message.sectionGroup, options);\n                        if (options.oneofs)\n                            object.sectionType = \"sectionGroup\";\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this Section to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Section.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Section;\n            })();\n\n            NoteSequence.SectionGroup = (function() {\n\n                /**\n                 * Properties of a SectionGroup.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ISectionGroup\n                 * @property {Array.<tensorflow.magenta.NoteSequence.ISection>|null} [sections] SectionGroup sections\n                 * @property {number|null} [numTimes] SectionGroup numTimes\n                 */\n\n                /**\n                 * Constructs a new SectionGroup.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a SectionGroup.\n                 * @implements ISectionGroup\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ISectionGroup=} [properties] Properties to set\n                 */\n                function SectionGroup(properties) {\n                    this.sections = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SectionGroup sections.\n                 * @member {Array.<tensorflow.magenta.NoteSequence.ISection>} sections\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @instance\n                 */\n                SectionGroup.prototype.sections = $util.emptyArray;\n\n                /**\n                 * SectionGroup numTimes.\n                 * @member {number} numTimes\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @instance\n                 */\n                SectionGroup.prototype.numTimes = 0;\n\n                /**\n                 * Creates a new SectionGroup instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISectionGroup=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.SectionGroup} SectionGroup instance\n                 */\n                SectionGroup.create = function create(properties) {\n                    return new SectionGroup(properties);\n                };\n\n                /**\n                 * Encodes the specified SectionGroup message. Does not implicitly {@link tensorflow.magenta.NoteSequence.SectionGroup.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISectionGroup} message SectionGroup message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SectionGroup.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.sections != null && message.sections.length)\n                        for (var i = 0; i < message.sections.length; ++i)\n                            $root.tensorflow.magenta.NoteSequence.Section.encode(message.sections[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.numTimes != null && message.hasOwnProperty(\"numTimes\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.numTimes);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SectionGroup message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.SectionGroup.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISectionGroup} message SectionGroup message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SectionGroup.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SectionGroup message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.SectionGroup} SectionGroup\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SectionGroup.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.SectionGroup();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.sections && message.sections.length))\n                                message.sections = [];\n                            message.sections.push($root.tensorflow.magenta.NoteSequence.Section.decode(reader, reader.uint32()));\n                            break;\n                        case 2:\n                            message.numTimes = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SectionGroup message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.SectionGroup} SectionGroup\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SectionGroup.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SectionGroup message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SectionGroup.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.sections != null && message.hasOwnProperty(\"sections\")) {\n                        if (!Array.isArray(message.sections))\n                            return \"sections: array expected\";\n                        for (var i = 0; i < message.sections.length; ++i) {\n                            var error = $root.tensorflow.magenta.NoteSequence.Section.verify(message.sections[i]);\n                            if (error)\n                                return \"sections.\" + error;\n                        }\n                    }\n                    if (message.numTimes != null && message.hasOwnProperty(\"numTimes\"))\n                        if (!$util.isInteger(message.numTimes))\n                            return \"numTimes: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a SectionGroup message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.SectionGroup} SectionGroup\n                 */\n                SectionGroup.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.SectionGroup)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.SectionGroup();\n                    if (object.sections) {\n                        if (!Array.isArray(object.sections))\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.SectionGroup.sections: array expected\");\n                        message.sections = [];\n                        for (var i = 0; i < object.sections.length; ++i) {\n                            if (typeof object.sections[i] !== \"object\")\n                                throw TypeError(\".tensorflow.magenta.NoteSequence.SectionGroup.sections: object expected\");\n                            message.sections[i] = $root.tensorflow.magenta.NoteSequence.Section.fromObject(object.sections[i]);\n                        }\n                    }\n                    if (object.numTimes != null)\n                        message.numTimes = object.numTimes | 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SectionGroup message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.SectionGroup} message SectionGroup\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SectionGroup.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.sections = [];\n                    if (options.defaults)\n                        object.numTimes = 0;\n                    if (message.sections && message.sections.length) {\n                        object.sections = [];\n                        for (var j = 0; j < message.sections.length; ++j)\n                            object.sections[j] = $root.tensorflow.magenta.NoteSequence.Section.toObject(message.sections[j], options);\n                    }\n                    if (message.numTimes != null && message.hasOwnProperty(\"numTimes\"))\n                        object.numTimes = message.numTimes;\n                    return object;\n                };\n\n                /**\n                 * Converts this SectionGroup to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SectionGroup.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return SectionGroup;\n            })();\n\n            return NoteSequence;\n        })();\n\n        magenta.SequenceMetadata = (function() {\n\n            /**\n             * Properties of a SequenceMetadata.\n             * @memberof tensorflow.magenta\n             * @interface ISequenceMetadata\n             * @property {string|null} [title] SequenceMetadata title\n             * @property {string|null} [artist] SequenceMetadata artist\n             * @property {Array.<string>|null} [genre] SequenceMetadata genre\n             * @property {Array.<string>|null} [composers] SequenceMetadata composers\n             */\n\n            /**\n             * Constructs a new SequenceMetadata.\n             * @memberof tensorflow.magenta\n             * @classdesc Represents a SequenceMetadata.\n             * @implements ISequenceMetadata\n             * @constructor\n             * @param {tensorflow.magenta.ISequenceMetadata=} [properties] Properties to set\n             */\n            function SequenceMetadata(properties) {\n                this.genre = [];\n                this.composers = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SequenceMetadata title.\n             * @member {string} title\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @instance\n             */\n            SequenceMetadata.prototype.title = \"\";\n\n            /**\n             * SequenceMetadata artist.\n             * @member {string} artist\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @instance\n             */\n            SequenceMetadata.prototype.artist = \"\";\n\n            /**\n             * SequenceMetadata genre.\n             * @member {Array.<string>} genre\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @instance\n             */\n            SequenceMetadata.prototype.genre = $util.emptyArray;\n\n            /**\n             * SequenceMetadata composers.\n             * @member {Array.<string>} composers\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @instance\n             */\n            SequenceMetadata.prototype.composers = $util.emptyArray;\n\n            /**\n             * Creates a new SequenceMetadata instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {tensorflow.magenta.ISequenceMetadata=} [properties] Properties to set\n             * @returns {tensorflow.magenta.SequenceMetadata} SequenceMetadata instance\n             */\n            SequenceMetadata.create = function create(properties) {\n                return new SequenceMetadata(properties);\n            };\n\n            /**\n             * Encodes the specified SequenceMetadata message. Does not implicitly {@link tensorflow.magenta.SequenceMetadata.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {tensorflow.magenta.ISequenceMetadata} message SequenceMetadata message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceMetadata.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.title != null && message.hasOwnProperty(\"title\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);\n                if (message.artist != null && message.hasOwnProperty(\"artist\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.artist);\n                if (message.genre != null && message.genre.length)\n                    for (var i = 0; i < message.genre.length; ++i)\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.genre[i]);\n                if (message.composers != null && message.composers.length)\n                    for (var i = 0; i < message.composers.length; ++i)\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.composers[i]);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SequenceMetadata message, length delimited. Does not implicitly {@link tensorflow.magenta.SequenceMetadata.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {tensorflow.magenta.ISequenceMetadata} message SequenceMetadata message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceMetadata.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SequenceMetadata message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.magenta.SequenceMetadata} SequenceMetadata\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceMetadata.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.SequenceMetadata();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.title = reader.string();\n                        break;\n                    case 2:\n                        message.artist = reader.string();\n                        break;\n                    case 3:\n                        if (!(message.genre && message.genre.length))\n                            message.genre = [];\n                        message.genre.push(reader.string());\n                        break;\n                    case 4:\n                        if (!(message.composers && message.composers.length))\n                            message.composers = [];\n                        message.composers.push(reader.string());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SequenceMetadata message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.magenta.SequenceMetadata} SequenceMetadata\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceMetadata.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SequenceMetadata message.\n             * @function verify\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SequenceMetadata.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.title != null && message.hasOwnProperty(\"title\"))\n                    if (!$util.isString(message.title))\n                        return \"title: string expected\";\n                if (message.artist != null && message.hasOwnProperty(\"artist\"))\n                    if (!$util.isString(message.artist))\n                        return \"artist: string expected\";\n                if (message.genre != null && message.hasOwnProperty(\"genre\")) {\n                    if (!Array.isArray(message.genre))\n                        return \"genre: array expected\";\n                    for (var i = 0; i < message.genre.length; ++i)\n                        if (!$util.isString(message.genre[i]))\n                            return \"genre: string[] expected\";\n                }\n                if (message.composers != null && message.hasOwnProperty(\"composers\")) {\n                    if (!Array.isArray(message.composers))\n                        return \"composers: array expected\";\n                    for (var i = 0; i < message.composers.length; ++i)\n                        if (!$util.isString(message.composers[i]))\n                            return \"composers: string[] expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a SequenceMetadata message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.magenta.SequenceMetadata} SequenceMetadata\n             */\n            SequenceMetadata.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.magenta.SequenceMetadata)\n                    return object;\n                var message = new $root.tensorflow.magenta.SequenceMetadata();\n                if (object.title != null)\n                    message.title = String(object.title);\n                if (object.artist != null)\n                    message.artist = String(object.artist);\n                if (object.genre) {\n                    if (!Array.isArray(object.genre))\n                        throw TypeError(\".tensorflow.magenta.SequenceMetadata.genre: array expected\");\n                    message.genre = [];\n                    for (var i = 0; i < object.genre.length; ++i)\n                        message.genre[i] = String(object.genre[i]);\n                }\n                if (object.composers) {\n                    if (!Array.isArray(object.composers))\n                        throw TypeError(\".tensorflow.magenta.SequenceMetadata.composers: array expected\");\n                    message.composers = [];\n                    for (var i = 0; i < object.composers.length; ++i)\n                        message.composers[i] = String(object.composers[i]);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a SequenceMetadata message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {tensorflow.magenta.SequenceMetadata} message SequenceMetadata\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SequenceMetadata.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults) {\n                    object.genre = [];\n                    object.composers = [];\n                }\n                if (options.defaults) {\n                    object.title = \"\";\n                    object.artist = \"\";\n                }\n                if (message.title != null && message.hasOwnProperty(\"title\"))\n                    object.title = message.title;\n                if (message.artist != null && message.hasOwnProperty(\"artist\"))\n                    object.artist = message.artist;\n                if (message.genre && message.genre.length) {\n                    object.genre = [];\n                    for (var j = 0; j < message.genre.length; ++j)\n                        object.genre[j] = message.genre[j];\n                }\n                if (message.composers && message.composers.length) {\n                    object.composers = [];\n                    for (var j = 0; j < message.composers.length; ++j)\n                        object.composers[j] = message.composers[j];\n                }\n                return object;\n            };\n\n            /**\n             * Converts this SequenceMetadata to JSON.\n             * @function toJSON\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SequenceMetadata.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return SequenceMetadata;\n        })();\n\n        magenta.VelocityRange = (function() {\n\n            /**\n             * Properties of a VelocityRange.\n             * @memberof tensorflow.magenta\n             * @interface IVelocityRange\n             * @property {number|null} [min] VelocityRange min\n             * @property {number|null} [max] VelocityRange max\n             */\n\n            /**\n             * Constructs a new VelocityRange.\n             * @memberof tensorflow.magenta\n             * @classdesc Represents a VelocityRange.\n             * @implements IVelocityRange\n             * @constructor\n             * @param {tensorflow.magenta.IVelocityRange=} [properties] Properties to set\n             */\n            function VelocityRange(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * VelocityRange min.\n             * @member {number} min\n             * @memberof tensorflow.magenta.VelocityRange\n             * @instance\n             */\n            VelocityRange.prototype.min = 0;\n\n            /**\n             * VelocityRange max.\n             * @member {number} max\n             * @memberof tensorflow.magenta.VelocityRange\n             * @instance\n             */\n            VelocityRange.prototype.max = 0;\n\n            /**\n             * Creates a new VelocityRange instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {tensorflow.magenta.IVelocityRange=} [properties] Properties to set\n             * @returns {tensorflow.magenta.VelocityRange} VelocityRange instance\n             */\n            VelocityRange.create = function create(properties) {\n                return new VelocityRange(properties);\n            };\n\n            /**\n             * Encodes the specified VelocityRange message. Does not implicitly {@link tensorflow.magenta.VelocityRange.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {tensorflow.magenta.IVelocityRange} message VelocityRange message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            VelocityRange.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.min != null && message.hasOwnProperty(\"min\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.min);\n                if (message.max != null && message.hasOwnProperty(\"max\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.max);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified VelocityRange message, length delimited. Does not implicitly {@link tensorflow.magenta.VelocityRange.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {tensorflow.magenta.IVelocityRange} message VelocityRange message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            VelocityRange.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a VelocityRange message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.magenta.VelocityRange} VelocityRange\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            VelocityRange.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.VelocityRange();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.min = reader.int32();\n                        break;\n                    case 2:\n                        message.max = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a VelocityRange message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.magenta.VelocityRange} VelocityRange\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            VelocityRange.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a VelocityRange message.\n             * @function verify\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            VelocityRange.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.min != null && message.hasOwnProperty(\"min\"))\n                    if (!$util.isInteger(message.min))\n                        return \"min: integer expected\";\n                if (message.max != null && message.hasOwnProperty(\"max\"))\n                    if (!$util.isInteger(message.max))\n                        return \"max: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a VelocityRange message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.magenta.VelocityRange} VelocityRange\n             */\n            VelocityRange.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.magenta.VelocityRange)\n                    return object;\n                var message = new $root.tensorflow.magenta.VelocityRange();\n                if (object.min != null)\n                    message.min = object.min | 0;\n                if (object.max != null)\n                    message.max = object.max | 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a VelocityRange message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {tensorflow.magenta.VelocityRange} message VelocityRange\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            VelocityRange.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.min = 0;\n                    object.max = 0;\n                }\n                if (message.min != null && message.hasOwnProperty(\"min\"))\n                    object.min = message.min;\n                if (message.max != null && message.hasOwnProperty(\"max\"))\n                    object.max = message.max;\n                return object;\n            };\n\n            /**\n             * Converts this VelocityRange to JSON.\n             * @function toJSON\n             * @memberof tensorflow.magenta.VelocityRange\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            VelocityRange.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return VelocityRange;\n        })();\n\n        return magenta;\n    })();\n\n    return tensorflow;\n})();\n\nmodule.exports = $root;\n"],"names":["magenta","tensorflow","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","NoteSequence","properties","this","timeSignatures","keySignatures","tempos","notes","pitchBends","controlChanges","partInfos","textAnnotations","sectionAnnotations","sectionGroups","keys","Object","i","length","valuesById","values","prototype","id","filename","referenceNumber","Long","fromBits","collectionName","ticksPerQuarter","emptyArray","totalTime","totalQuantizedSteps","sourceInfo","quantizationInfo","subsequenceInfo","sequenceMetadata","create","encode","message","writer","hasOwnProperty","uint32","string","int32","TimeSignature","fork","ldelim","KeySignature","Tempo","Note","double","PitchBend","ControlChange","PartInfo","SourceInfo","TextAnnotation","QuantizationInfo","int64","SubsequenceInfo","SequenceMetadata","SectionAnnotation","SectionGroup","encodeDelimited","decode","reader","end","undefined","len","pos","tag","toNumber","push","skipType","decodeDelimited","verify","isString","isInteger","low","high","Array","isArray","error","fromObject","object","String","fromValue","unsigned","parseInt","LongBits","TypeError","Number","toObject","options","arrays","defaults","long","longs","toString","j","json","isFinite","call","toJSON","constructor","toJSONOptions","pitch","pitchName","velocity","startTime","quantizedStartStep","endTime","quantizedEndStep","numerator","denominator","instrument","program","isDrum","part","voice","bool","Boolean","enums","PitchName","time","key","mode","Key","Mode","qpm","bend","quantizedStep","controlNumber","controlValue","name","sourceType","encodingType","parser","SourceType","EncodingType","Parser","text","annotationType","TextAnnotationType","$oneOfFields","stepsPerQuarter","stepsPerSecond","defineProperty","get","oneOfGetter","set","oneOfSetter","resolution","oneofs","startTimeOffset","endTimeOffset","sectionId","Section","sectionGroup","sectionType","sections","numTimes","genre","composers","title","artist","VelocityRange","min","max","module","exports"],"sourceRoot":""}